{# this file was generated by a tool #}
package {{ project_name }};
{%- set schema_name = "MySchema" -%}
{%- set list_type = "List" %}
{%- set schema = root %}
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.*;
import java.time.*;
import java.util.regex.*;
{% for typeName in schema.definitions -%}
    {%- set type = schema.definitions[typeName] -%}
    {%- if type.type == 'object' or not type.type %}
    {%- if type.allOf -%}
        {%- for allOfType in type.allOf -%}
            {%- if allOfType['$ref'] -%}
public class {{ typeName }} extends {{ allOfType['$ref'] | schema_type }} 
{
            {% else -%}
public class {{ typeName }} 
{
             {% endif -%}
        {% endfor %}
    {%- else -%}
public class {{ typeName }} 
{
    {% endif -%}
    {% for pn, property in type.properties.items() -%}
        {%- set propertyName = pn -%}
        {%- set javaType = "" -%}
        {%- if property.type == 'integer' -%}
            {%- if property.format == 'int32' -%}
                {%- set javaType = "int" -%}
            {%- elif property.format == 'int64' -%}
                {%- set javaType = "long" -%}
            {%- else -%}
                {%- set javaType = "int" -%}
            {%- endif -%}
        {%- elif property.type == 'number' -%}
            {%- if property.format == 'float' -%}
                {%- set javaType = "float" -%}
            {%- elif property.format == 'double' -%}
                {%- set javaType = "double" -%}
            {%- elif property.format == 'decimal' -%}
                {%- set javaType = "BigDecimal" -%}
            {%- else -%}
                {%- set javaType = "double" -%}
            {%- endif -%}
        {%- elif property.type == 'string' -%}
            {%- if property.format == 'date-time' -%}
                {%- set javaType = "LocalDateTime" -%}
            {%- endif -%}
            {%- if property.format == 'email' -%}
                {%- set javaType = "String" -%}
            {%- endif -%}
            {%- if property.format == 'uri' -%}
                {%- set javaType = "URL" -%}
            {%- endif -%}
            {%- if property.format == 'date' -%}
                {%- set javaType = "LocalDate" -%}
            {%- endif -%}
            {%- if property.format == 'time' -%}
                {%- set javaType = "LocalTime" -%}
            {%- endif -%}
            {%- if property.format == 'uuid' -%}
                {%- set javaType = "UUID" -%}
            {%- endif -%}
            {%- if property.format == 'ipv4' -%}
                {%- set javaType = "Inet4Address" -%}
            {%- endif -%}
            {%- if property.format == 'ipv6' -%}
                {%- set javaType = "Inet6Address" -%}
            {%- endif -%}
            {%- if property.format == 'hostname' -%}
                {%- set javaType = "String" -%}
            {%- endif -%}
            {%- if not property.format -%}
                {%- set javaType = "String" -%}
            {%- endif -%}
        {%- elif property.type == 'array' -%}
            {%- if property.items.type == 'integer' -%}
                {%- if property.items.format == 'int32' or not property.items.format -%}
                    {%- set javaType = list_type+"<Integer>" -%}
                {%- endif -%}
                {%- if property.items.format == 'int64' -%}
                    {%- set javaType = list_type+"<Long>" -%}
                {%- endif -%}
            {%- elif property.items.type == 'number' -%}
                {%- if property.items.format == 'float' -%}
                    {%- set javaType = list_type+"<Float>" -%}
                {%- endif -%}
                {%- if property.items.format == 'double' or not property.items.format -%}
                    {%- set javaType = list_type+"<Double>" -%}
                {%- endif -%}
                {%- if property.items.format == 'decimal' -%}
                    {%- set javaType = list_type+"<BigDecimal>" -%}
                {%- endif -%}
            {%- elif property.items.type == 'string' -%}
                {%- if property.items.format == 'date-time' -%}
                    {%- set javaType = list_type+"LocalDateTime>" -%}
                {%- endif -%}
                {%- if property.items.format == 'email' -%}
                    {%- set javaType = list_type+"String>" -%}
                {%- endif -%}
                {%- if property.items.format == 'uri' -%}
                    {%- set javaType = list_type+"URI>" -%}
                {%- endif -%}
                {%- if property.items.format == 'uuid' -%}
                    {%- set javaType = list_type+"UUID>" -%}
                {%- endif -%}
                {%- if property.items.format == 'ipv4' -%}
                    {%- set javaType = list_type+"Inet4Address>" -%}
                {%- endif -%}
                {%- if property.items.format == 'ipv6' -%}
                    {%- set javaType = list_type+"<IPAddress>" -%}
                {%- endif -%}
                {%- if property.items.format == 'hostname' -%}
                    {%- set javaType = list_type+"<string>" -%}
                {%- endif -%}
                {%- if not property.items.format -%}
                    {%- set javaType = list_type+"<string>" -%}
                {%- endif -%}
            {%- elif property.items['$ref'] -%}
                {%- set ref = property.items['$ref'] -%}
                {%- set javaType = list_type+"<"+(ref | schema_type | pascal)+">" -%}
            {%- else -%}
                {%- set javaType = list_type+"<object>" -%}
            {%- endif -%}
        {%- else -%}
            {%- set javaType = "object" -%}
        {%- endif -%}
        {%- if not property.type and not property.items -%}
            {%- if property['$ref'] -%}
                {%- set ref = property['$ref'] -%}
                {%- set javaType = ref | schema_type | pascal -%}
            {%- endif -%}
        {%- endif -%}
        {%- if property.enum %}
    public enum {{ propertyName | pascal }}Enum
    {
                {% for value in property.enum %}{{ value | pascal }} = {{ loop.index - 1 }},{% endfor %}
    }
    private {{ propertyName | pascal }}Enum {{ propertyName }} = {{ propertyName | pascal }}Enum.{{ property.enum[0] | pascal }};
    public {{ propertyName | pascal }}Enum get{{ propertyName | pascal }}
    {
        return _{{ propertyName }};
    }
    public void set{{ propertyName | pascal }}({{ propertyName | pascal }}Enum value)
    {
        {{ propertyName }} = value;
    }
    {%- else %}
    private {{ javaType }} {{ propertyName }};
    {% if property.description -%}/// <description>{{ property.description }}</description>{%- endif %}
    @JsonProperty("{{ propertyName }}")
    public {{ javaType }} get{{ propertyName | pascal }}()
    {
        return {{ propertyName }};
    }
    @JsonProperty("{{ propertyName }}")
    public void set{{ propertyName | pascal }}( {{ javaType }} value)
    {
    {%- if property.minimum -%}
        if (value < {{ property.minimum }})
        {
        throw new IllegalArgumentException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooSmall, value, {{ property.minimum }}));
        }
    {%- endif -%}
    {%- if property.exclusiveMinimum -%}
        if (value <= {{ property.exclusiveMinimum }})
        {
        throw new IllegalArgumentException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooSmall, value, {{ property.exclusiveMinimum }}));
        }
    {%- endif -%}
    {%- if property.maximum -%}
        if (value > {{ property.maximum }})
        {
        throw new IllegalArgumentException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooBig, value, {{ property.maximum }}));
        }
    {%- endif -%}
    {%- if property.exclusiveMaximum -%}
        if (value >= {{ property.exclusiveMaximum }})
        {
        throw new IllegalArgumentException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooBig, value, {{ property.exclusiveMaximum }}));
        }
    {%- endif -%}
    {%- if property.maxLength -%}
        if (value.ToString().Length > {{ property.maxLength }})
        {
        throw new IllegalArgumentException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooLong, value, {{ property.maxLength }}));
        }
    {%- endif -%}
    {%- if property.minLength -%}
        if (value.ToString().Length < {{ property.minLength }})
        {
        throw new IllegalArgumentException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooShort, value, {{ property.minLength }}));
        }
    {%- endif -%}
    {%- if property.pattern -%}
        if (!System.Text.RegularExpressions.Regex.IsMatch(value.ToString(), Patterns.{{ property.pattern | pascal }}))
        {
        throw new IllegalArgumentException("{{ propertyName | pascal }}", ExceptionMessages.ValueIsInvalid);
        }
    {%- endif -%}
    {%- if property.format == "email" -%}
        if (!System.Text.RegularExpressions.Regex.IsMatch(System.Text.Json.JsonSerializer.ToJson(value), Patterns.Email, System.Text.RegularExpressions.RegexOptions.Singleline))
        {
        throw new System.ArgumentException(ExceptionMessages.ValueIsNotAnEmail, "{{ propertyName | pascal }}");
        }
    {%- endif %}
        {{ propertyName }} = value;
    }
    {% endif -%}
    {%- endfor -%}
{% endif %}
}
{%- endfor %}
