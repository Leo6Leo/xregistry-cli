{#- CloudEvents macros -#}

{#- Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates -#}
{%- macro DeclareUriTemplateArguments(definition) -%}
{%- for attrname in definition.metadata.attributes -%}
{%- set attribute = definition.metadata.attributes[attrname] -%}
    {%- if attribute.type == "uritemplate" -%}
        {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
        , String {{ placeholder }}
        {%- endfor -%}
    {%- elif attribute.value is not defined -%}
        {%- if not attrname == "time" and not attrname == "id" -%}
        , String {{ attrname }}{%- if not attribute.required %} = default {%- endif %}{% endif -%}
    {%- endif -%}
{%- endfor -%} 
{%- endmacro -%}

{#- Generates a CloudNative.CloudEvents.CloudEvent object from cloudEventDefinition as definition -#}
{%- macro DeclareCloudNativeCloudEvent(variable, data, definition) -%}
CloudEvent {{ variable }} = new CloudEventBuilder()
{%- for attrname in definition.metadata.attributes -%}
{%- set attribute = definition.metadata.attributes[attrname] -%}
{%- if attrname in ["subject", "type", "datacontenttype"] -%}
    {%- set attrProp = attrname | pascal | replace("Datacontenttype", "DataContentType") %}
    .with{{ attrProp }}({% if attribute.value -%}"{{ attribute.value }}"
    {%- if attribute.type == "uritemplate" -%}
    {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
    .replace("{ {{- placeholder -}} }", placeholder)
    {%- endfor -%}
    {%- endif -%}{%- else -%}{{ attrname }}{%- endif -%})
{%- elif attrname in ["id"] %}
    .with{{ attrname | pascal }}(UUID.randomUUID().toString())
{%- elif attrname in [ "source"] -%}
    {%- set attrProp = attrname | pascal %}
    .with{{ attrProp }}({% if attribute.value -%}URI.create("{{ attribute.value }}"
    {%- if attribute.type == "uritemplate" -%}
    {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
    .replace("{ {{- placeholder -}} }", placeholder)
    {%- endfor -%}
    {%- endif -%}){%- else -%}{{ attrname }}{%- endif -%})
{%- elif attrname in ["time"] %}
    .with{{ attrname | pascal }}({% if attribute.value -%}
        {%- if attribute.value == "0001-01-01T00:00:00+00:00" -%}
            OffsetDateTime.now()
        {%- else -%}   
            OffsetDateTime.parse("{{- attribute.value -}}")
        {%- endif -%}
        {%- else -%}
            OffsetDateTime.now()
        {%- endif -%})
{%- else -%}
    .withExtension( "{{ attrProp }}", ({% if attribute.value -%}$"{{ attribute.value }}"
    {%- if attribute.type == "uritemplate" -%}
    {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
    .replace("{ {{- placeholder -}} }", placeholder)
    {%- endfor -%}
    {%- endif -%}
    {%- else -%}{{ attrname }}{%- endif -%})
{%- endif -%}
{%- endfor %}
    .withData({%- if definition.metadata.datacontenttype -%}"{{ definition.metadata.datacontenttype.value }}", {% endif -%}
              {%- if definition.metadata.dataschema -%}"{{ definition.metadata.dataschema }}", {% endif -%} {{ data }} )
    .build();
{%- endmacro -%}

{%- macro DeclareDispatchObjectsArgs(groups, withType) -%}
{%- for group_key, group in groups.items() if (group | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = group.id | default(group_key) | pascal %}
{%- if withType -%}I{{ pascalGroupName | strip_namespace }}Dispatcher {% endif %}{{ group.id | default(group_key) | strip_namespace | camel }}Dispatcher{%- if not loop.last %}, {%- endif -%}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsFields(groups) -%}
{%- for group_key, group in groups.items() if (group | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = group.id | default(group_key) | pascal %}
I{{ pascalGroupName | strip_namespace }}Dispatcher _{{ group.id | default(group_key) | strip_namespace | camel }}Dispatcher;
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, groups, args, body) -%}
{%- if groups | exists("format", "cloudevents" ) %}
{{ class_name }}( {{ args }}{%- if args %}, {%- endif -%}
    {%- for group_key, group in groups.items() -%}
    {%- set pascalGroupName = group.id | default(group_key) | pascal -%} 
    I{{ pascalGroupName | strip_namespace }}Dispatcher {{ group.id | default(group_key) | strip_namespace | camel }}Dispatcher
    {%- if not loop.last -%}, {%- endif -%}
    {%- endfor -%}
)
{
    {%- for group_key, group in groups.items() -%}
    {%- set pascalGroupName = group.id | default(group_key) | pascal %}
    this._{{ group.id | default(group_key) | strip_namespace | camel }}Dispatcher = {{ group.id | default(group_key) | strip_namespace | camel }}Dispatcher;
    {%- endfor %}
    {{ body | indent(4) }}
}
{% endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObjects(cloudEvent, groups) -%}
{%- if groups | exists("format", "cloudevents" ) -%}
try {
    var cloudEventType = {{ cloudEvent }}.getType();
    switch (cloudEventType)
    {
        {%- for group_key, group in groups.items() if (group | exists("format", "cloudevents" )) -%}
        {%- for id, definition in group.definitions.items() -%}
        {%- set pascalDefinitionName = definition.id | pascal %}
        case "{{ definition.id }}":
            if ( this._{{ group.id | default(group_key) | strip_namespace | camel }}Dispatcher != null )
            {
                return this._{{ group.id | default(group_key) | strip_namespace | camel }}Dispatcher.on{{ pascalDefinitionName | strip_namespace }}Async({{ cloudEvent }},
                    {%- if definition.schemaurl -%}
                {{ definition.schemaurl | schema_type | strip_namespace  | pascal }}.fromData({{ cloudEvent }}.getData())
                {%- else -%}
                {{ cloudEvent }}.getData()
                {%- endif %});
            }
            break;
        {% endfor %}
        {% endfor %}
        default:
            log.log(Level.WARNING, "Unsupported CloudEvent type %s", cloudEventType);
            break;
    }
} catch ( Exception exception ) {
    log.log(Level.WARNING, "Error while dispatching CloudEvent", exception);
}
return CompletableFuture.completedFuture(null);
{%- endif -%}
{%- endmacro -%}

{%- macro DeclareDispatchInterface(project_name, group, pascalGroupName) -%}
package {{ pascalGroupName | namespace(project_name) | lower() }};

import io.cloudevents.CloudEvent;
import java.util.concurrent.CompletableFuture;

public interface I{{ pascalGroupName | strip_namespace }}Dispatcher
{
    {%- for id, definition in group.definitions.items() if (definition | exists( "format", "cloudevents" )) -%}
    {%- set pascalDefinitionName = definition.id | strip_namespace | pascal -%}
    {%- if definition.schemaurl -%}
    {%- set dataType = definition.schemaurl | schema_type | strip_namespace  | pascal -%}
    {%- else -%}
    {%- set dataType = "Object" -%}
    {%- endif %}   
    CompletableFuture<Void> on{{ pascalDefinitionName | strip_namespace }}Async(CloudEvent cloudEvent, {{ dataType }} data);
    {%- endfor %}
}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, root) -%}
{%- set groups = root.groups -%}
{%- if groups | exists("format", "cloudevents" ) %}
{%- for group_key, group in groups.items() if (group | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = group.id | default(group_key) | pascal -%}
{%- set interfaceName = "I"+(pascalGroupName | strip_namespace)+"Dispatcher" -%}
{{- DeclareDispatchInterface(project_name, group, pascalGroupName) | pushfile(interfaceName+".java") -}}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}