{%- set groups = root.groups -%}
{%- set function_name = project_name | pascal -%}
using Azure.Messaging;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.EventGrid;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;

namespace {{ project_name | pascal }}
{
    public class {{ project_name | pascal | concat_namespace }}Functions
    {

// remove this warning suppression when you have implemented all methods
// this suppressess the warning that async method lacks 'await' operators and will run synchronously
#pragma warning disable CS1998

        {% for group_key, group in groups.items() -%}
        {% for id, definition in group.definitions.items() -%}
        {% set pascalDefinitionName = definition.id | pascal %}

        private static async Task On{{ pascalDefinitionName | concat_namespace }}(CloudEvent cloudEvent, ILogger log)
        {
            log.LogInformation("Received CloudEvent of type {eventType}", cloudEvent.Type);
            {%- if definition.schemaurl %}
            var data = cloudEvent.Data.ToObjectFromJson<{{ definition.schemaurl | schema_type | strip_namespace }}>();
            {%- else %}
            var data = cloudEvent.Data.ToObjectFromJson<object>();
            {%- endif %}        
            // TODO: Process the CloudEvent data for {{ definition.id }} event
        }
        {% endfor %}
        {% endfor %}

        [FunctionName("{{ project_name | pascal | concat_namespace }}")]
        public static async Task Run(
                [EventGridTrigger] CloudEvent cloudEvent,
                ILogger log)
        {
            var cloudEventType = cloudEvent.Type;
            switch (cloudEventType)
            {
                {% for group_key, group in groups.items() -%}
                {% for id, definition in group.definitions.items() -%}
                {% set pascalDefinitionName = definition.id | pascal %}
                    case "{{ definition.id }}":
                        await On{{ pascalDefinitionName | concat_namespace }}(cloudEvent,log);
                        break;
                {% endfor %}
                {% endfor %}
                default:
                    log.LogError("Unsupported CloudEvent type {eventType}", cloudEventType);
                    break;
            }
        }
    }
}