// this file was generated by a tool 
{%- if not uses_avro -%}{%- exit -%}{%- endif -%}
{%- set schema_name = class_name | pascal -%}
{%- set schema = root %}
using System;

{%- macro emitclass(type, type_name) -%}
    {%- if type.type == 'record' or not type.type %}
    public partial class {{ type_name | pascal }}
    {
        public static {{ type_name | pascal }} FromData(object data)
        {
            // generated from a JSON schema and therefore only supporting JSON
            if ( data is {{ type_name | pascal }})
            {
                return ({{ type_name | pascal }})data;
            }
            var stream = data as Stream;
            if (stream == null)
            {
                if (data is BinaryData)
                {
                    stream = ((BinaryData)data).ToStream();
                }
                else if (data is byte[])
                {
                    stream = new MemoryStream((byte[])data);
                }
                else
                {
                    throw new NotSupportedException("Data is not of a supported type for conversion to {{ type_name | pascal }}");  
                }
            }
            var decoder = new Avro.IO.BinaryDecoder(stream);
            var writer = new Avro.Specific.SpecificDatumReader<{{ type_name | pascal }}>({{ type_name | pascal }}._SCHEMA, {{ type_name | pascal }}._SCHEMA);
            return writer.Read(default({{ type_name | pascal }}), decoder);
        }
    }
    {%- endif %}
{%- endmacro %}

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace {{ project_name | pascal }}
{

    {{- emitclass(schema, schema_name) }}
}