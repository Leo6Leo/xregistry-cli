// this file was generated by a tool 
{%- set schema_name = class_name | pascal -%}
{%- set list_type = "List" %}
{%- set schema = root %}

{%- macro emitclass(type, type_name) -%}
    {%- if type.type == 'object' or not type.type %}
    public partial class {{ type_name | pascal }}
    {%- if type.allOf -%}
        {%- for allOfType in type.allOf -%}
            {%- if loop.first -%}
            {%- if allOfType['$ref'] -%}
                : {{ allOfType['$ref'] | schema_type | pascal }}
            {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif %}
    {
        public static {{ type_name | pascal }} FromData(object data)
        {
            // generated from a JSON schema and therefore only supporting JSON
            if ( data is {{ type_name | pascal }})
            {
                return ({{ type_name | pascal }})data;
            }
            if (data is JsonElement) 
            {
                return JsonSerializer.Deserialize<{{ type_name | pascal }}>((JsonElement)data);
            }
            else if ( data is string)
            {
                return JsonSerializer.Deserialize<{{ type_name | pascal }}>((string)data);
            }
            throw new NotSupportedException("Data is not of a supported type for conversion to {{ type_name | pascal }}");
        }
    {% if type.properties %}
    {% for pn, property in type.properties.items()  -%}
        {%- set propertyName = pn | strip_invalid_identifier_characters %}
        {%- set csharpType = "" -%}
        {%- if property.type == 'integer' -%}
            {%- if property.format == 'int32' -%}
                {%- set csharpType = "int" -%}
            {%- elif property.format == 'int64' -%}
                {%- set csharpType = "long" -%}
            {%- else -%}    
                {%- set csharpType = "int" -%}
            {%- endif -%}
        {%- elif property.type == 'number' -%}
            {%- if property.format == 'float' -%}
                {%- set csharpType = "float" -%}
            {%- elif property.format == 'double' -%}
                {%- set csharpType = "double" -%}
            {%- elif property.format == 'decimal' -%}
                {%- set csharpType = "decimal" -%}
            {%- else -%}
                {%- set csharpType = "double" -%}
            {%- endif -%}
        {%- elif property.type == 'string' -%}
            {%- if property.format == 'date-time' -%}
                {%- set csharpType = "DateTime" -%}
            {%- endif -%}
            {%- if property.format == 'email' -%}
                {%- set csharpType = "string" -%}
            {%- endif -%}
            {%- if property.format == 'uri' -%}
                {%- set csharpType = "Uri" -%}
            {%- endif -%}
            {%- if property.format == 'date' -%}
                {%- set csharpType = "DateTime" -%}
            {%- endif -%}
            {%- if property.format == 'time' -%}
                {%- set csharpType = "TimeSpan" -%}
            {%- endif -%}
            {%- if property.format == 'uuid' -%}
                {%- set csharpType = "Guid" -%}
            {%- endif -%}
            {%- if property.format == 'ipv4' -%}
                {%- set csharpType = "IPAddress" -%}
            {%- endif -%}
            {%- if property.format == 'ipv6' -%}
                {%- set csharpType = "IPAddress" -%}
            {%- endif -%}
            {%- if property.format == 'hostname' -%}
                {%- set csharpType = "string" -%}
            {%- endif -%}
            {%- if not property.format -%}
                {%- set csharpType = "string" -%}
            {%- endif -%}
        {%- elif property.type == 'array' -%}
            {%- if property.items.type == 'integer' -%}
                {%- if property.items.format == 'int32' or not property.items.format -%}
                    {%- set csharpType = list_type+"<int>" -%}
                {%- endif -%}
                {%- if property.items.format == 'int64' -%}
                    {%- set csharpType = list_type+"<long>" -%}
                {%- endif -%}
            {%- elif property.items.type == 'number' -%}
                {%- if property.items.format == 'float' -%}
                    {%- set csharpType = list_type+"<float>" -%}
                {%- endif -%}
                {%- if property.items.format == 'double' or not property.items.format -%}
                    {%- set csharpType = list_type+"<double>" -%}
                {%- endif -%}
                {%- if property.items.format == 'decimal' -%}
                    {%- set csharpType = list_type+"<decimal>" -%}
                {%- endif -%}
            {%- elif property.items.type == 'string' -%}
                {%- if property.items.format == 'date-time' -%}
                    {%- set csharpType = list_type+"<DateTime>" -%}
                {%- endif -%}
                {%- if property.items.format == 'email' -%}
                    {%- set csharpType = list_type+"<string>" -%}
                {%- endif -%}
                {%- if property.items.format == 'uri' -%}
                    {%- set csharpType = list_type+"<Uri>" -%}
                {%- endif -%}
                {%- if property.items.format == 'uuid' -%}
                    {%- set csharpType = list_type+"<Guid>" -%}
                {%- endif -%}
                {%- if property.items.format == 'ipv4' -%}
                    {%- set csharpType = list_type+"<IPAddress>" -%}
                {%- endif -%}
                {%- if property.items.format == 'ipv6' -%}
                    {%- set csharpType = list_type+"<IPAddress>" -%}
                {%- endif -%}
                {%- if property.items.format == 'hostname' -%}
                    {%- set csharpType = list_type+"<string>" -%}
                {%- endif -%}
                {%- if not property.items.format -%}
                    {%- set csharpType = list_type+"<string>" -%}
                {%- endif -%}
            {%- elif property.items['$ref'] -%} 
                {%- set ref = property.items['$ref'] -%}
                {%- set csharpType = list_type+"<"+(ref | schema_type | pascal)+">" -%}
            {%- elif 'type' in property['items'] and property['items']['type'] == "object" and 'properties' in property['items'] -%}
                {%- set csharpType = list_type+"<"+((propertyName + "Item") | pascal)+">" -%}
                {{ emitclass( property['items'], (propertyName + "Item") | pascal) | indent }}
            {%- else -%}
                {%- set csharpType = list_type+"<object>" -%}
            {%- endif -%}
        {%- else -%}
           {%- set csharpType = "object" -%}
        {%- endif -%}
        {%- if (not property.type) or property.type == "object"  -%}
            {%- if property['$ref'] -%}
                {%- set ref = property['$ref'] -%}
                {%- set csharpType = ref | schema_type | pascal -%}
            {%- elif property.properties -%}
                {%- set csharpType = (propertyName + "Item") | pascal -%}
                {{ emitclass(property, csharpType) | indent }}
            {%- endif -%}
        {%- endif -%}
        {%- if property.enum %}
        public enum {{ propertyName | pascal }}Enum
        {
            {% for value in property.enum %}
                {{ value | pascal }} = {{ loop.index - 1 }},
            {% endfor %}
        }
        private {{ propertyName | pascal }}Enum _{{ propertyName }} = {{ propertyName | pascal }}Enum.{{ property.enum[0] | pascal }};
        {%- if property.description %} 
        /// <description>{{property.description}}</description> 
        {%- endif %}
        [JsonPropertyName("{{ propertyName }}")]
        public {{ propertyName | pascal }}Enum {{ propertyName | pascal }}
        {
            get
            {
                return _{{ propertyName }};
            }
            set
            {
                if (!Enum.IsDefined(typeof({{ propertyName | pascal }}Enum), value))
                {
                    throw new ArgumentOutOfRangeException("{{ propertyName | pascal }}", ExceptionMessages.ValueIsInvalid);
                }
                _{{ propertyName }} = value;
            }
        }
        {%- else %}
        private {{ csharpType }} _{{ propertyName }} { get; set; }
        {%- if property.description %} 
        /// <description>{{property.description}}</description> 
        {%- endif %}
        [JsonPropertyName("{{ propertyName }}")]
        public {{ csharpType }} {{ propertyName | pascal }}
        {
            get
            {
                return _{{ propertyName }};
            }
            set
            {
                {%- if property.minimum -%}
                if (value < {{ property.minimum }})
                {
                    throw new ArgumentOutOfRangeException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooSmall, value, {{ property.minimum }}));
                }
                {%- endif -%}
                {%- if property.exclusiveMinimum -%}
                if (value <= {{ property.exclusiveMinimum }})
                {
                    throw new ArgumentOutOfRangeException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooSmall, value, {{ property.exclusiveMinimum }}));
                }
                {%- endif -%}
                {%- if property.maximum -%}
                if (value > {{ property.maximum }})
                {
                    throw new ArgumentOutOfRangeException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooBig, value, {{ property.maximum }}));
                }
                {%- endif -%}
                {%- if property.exclusiveMaximum -%}
                if (value >= {{ property.exclusiveMaximum }})
                {
                    throw new ArgumentOutOfRangeException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooBig, value, {{ property.exclusiveMaximum }}));
                }
                {%- endif -%}
                    {%- if property.maxLength -%}
                if (value.ToString().Length > {{ property.maxLength }})
                {
                    throw new ArgumentOutOfRangeException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooLong, value, {{ property.maxLength }}));
                }
                {%- endif -%}
                {%- if property.minLength -%}
                if (value.ToString().Length < {{ property.minLength }})
                {
                    throw new ArgumentOutOfRangeException("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooShort, value, {{ property.minLength }}));
                }
                {%- endif -%}
                {%- if property.pattern -%}
                if (!System.Text.RegularExpressions.Regex.IsMatch(value.ToString(), Patterns.{{ property.pattern | pascal }}))
                {
                    throw new ArgumentOutOfRangeException("{{ propertyName | pascal }}", ExceptionMessages.ValueIsInvalid);
                }
                {%- endif -%}
                {%- if property.format == "email" -%}
                if (!System.Text.RegularExpressions.Regex.IsMatch(System.Text.Json.JsonSerializer.ToJson(value), Patterns.Email, System.Text.RegularExpressions.RegexOptions.Singleline))
                {
                    throw new System.ArgumentException(ExceptionMessages.ValueIsNotAnEmail, "{{ propertyName | pascal }}");
                }
                {%- endif %}
                _{{ propertyName }} = value;
            }
        }    
        {% endif -%}
    {%- endfor -%}
    {%- endif %}
    }
    {% endif -%}
{%- endmacro %}

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace {{ project_name | pascal }}
{
    {{- emitclass(schema, schema_name) }}
}


