{%- set groups = root.groups %}
  

// this file was generated by a tool 

using CloudNative.CloudEvents;
using CloudNative.CloudEvents.Http;
using CloudNative.CloudEvents.SystemTextJson;

{% for group_key in groups.keys() -%}
{%- set group = groups[group_key] -%}
{%- set pascalGroupName = group.id | pascal -%}
namespace {{ project_name | pascal }}
{
    public partial class {{ pascalGroupName | strip_namespace }}EventProducer
    {
        HttpClient client;
        private readonly ContentMode contentMode;
        private readonly CloudEventFormatter formatter;

        public {{ pascalGroupName | strip_namespace }}EventProducer(HttpClient client, ContentMode contentMode, CloudEventFormatter formatter)
        {
            this.contentMode = contentMode;
            this.formatter = formatter;
            this.client = client;
        }

        public {{ pascalGroupName | strip_namespace }}EventProducer(HttpClient client)
            : this(client, ContentMode.Structured, new JsonEventFormatter())
        {
        }

        {% for id in group.definitions -%}
        {%- set definition = group.definitions[id] -%}
        {%- set pascalDefinitionName = definition.id | pascal %}
        public async Task Send{{ pascalDefinitionName | strip_namespace }}Async(
        {%- for attrname in definition.metadata.attributes -%}
        {%- set attribute = definition.metadata.attributes[attrname] -%}
            {%- if attribute.type == "uritemplate" -%}
                {%- for placeholder in attribute.value | regex_search('\{([A-Za-z0-9_]+)\}') -%}
                    string {{ placeholder }},
                {%- endfor -%}
            {%- elif attribute.value is not defined -%}
                string {{ attrname }} {%- if not attribute.required -%} = default {% endif %},
            {%- endif -%}
        {%- endfor -%} 
        {%- if definition.schemaurl -%}
        {{ definition.schemaurl | schema_type | strip_namespace }} data)
        {%- else -%}
        object data)
        {%- endif %}
        {
            CloudEvent cloudEvent = new CloudEvent()
            {
            {%- for attrname in definition.metadata.attributes -%}
            {%- set attribute = definition.metadata.attributes[attrname] -%}
            {%- if attrname in ["id", "subject", "type", "datacontenttype"] -%}
                {%- set attrProp = attrname | pascal | replace("Datacontenttype", "DataContentType") %}
                {{ attrProp }} = {% if attribute.value -%}$"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%},
            {%- endif -%}
            {%- if attrname in [ "source", "dataschema"] -%}
                {%- set attrProp = attrname | pascal | replace("Dataschema", "DataSchema") %}
                {{ attrProp }} = {% if attribute.value -%}new Uri($"{{ attribute.value }}"){%- else -%}{{ attrname }}{%- endif -%},
            {%- endif -%}
            {%- if attrname in ["time"] %}
                {{ attrname | pascal }} = {% if attribute.value -%}
                    {%- if attribute.value == "0001-01-01T00:00:00+00:00" -%}
                       DateTime.UtcNow
                    {%- else -%}   
                       DateTime.Parse("{{- attribute.value -}}")
                    {%- endif -%}
                  {%- else -%}
                     {{- attrname -}}
                  {%- endif -%},
            {%- endif -%}
            {%- endfor %}
            };
            {% for attrname in definition.metadata.attributes -%}
            {%- set attribute = definition.metadata.attributes[attrname] -%}
            {%- if attrname not in ["id", "time", "source", "subject", "type", "dataschema", "datacontenttype", "source"] -%}
            cloudEvent.SetAttributeAsString("{{attrname}}",{%- if attribute.value -%}"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%});
            {%- endif %}
            {%- endfor -%}
            cloudEvent.Data = data;
            await client.PostAsync(client.BaseAddress, cloudEvent.ToHttpContent(contentMode, formatter));
        }
        {% endfor %}
    }
}
{% endfor -%}