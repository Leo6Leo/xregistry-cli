{%- import "cloudEvents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set groups = root.groups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_amqp_message = (root | exists( "format", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
{%- set uses_mqtt_message = (root | exists( "format", "mqtt" )) %}
{%- set uses_mqtt_endpoint = (root | exists( "protocol", "mqtt" )) %}
{%- set function_name = project_name | pascal -%}
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Text.RegularExpressions;
using CloudNative.CloudEvents.Experimental.Endpoints;

{%- if uses_cloudevents_message %}
using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
{%- endif %}
{%- if uses_amqp_message %}
{{ amqp.AmqpNetLiteHeaders() }}
{%- endif %}
{%- if uses_mqtt_message %}
{{ mqtt.MqttNetHeaders() }}
{%- endif %}
using Microsoft.Extensions.Logging;
 
{% for group_key, group in groups.items() -%}
 {%- set pascalGroupName = group.id | default(group_key) | pascal -%}
namespace {{ project_name | pascal }}.{{ pascalGroupName }}
{
     {%- set class_name = (project_name | pascal | strip_namespace)+"Consumer" %}
    public class {{ class_name }} : IDisposable
    {
        {{ cloudEvents.DeclareHandlerServices( project_name, class_name, groups) | indent(8) }}
        {{ amqp.DeclareHandlerServices( project_name, class_name, groups) | indent(8) }}
        {{ mqtt.DeclareHandlerServices( project_name, class_name, groups) | indent(8) }}
        
        {%- if uses_cloudevents_message %}
        private readonly ContentMode contentMode;
        private readonly CloudEventFormatter formatter;
        
        public async Task DispatchCloudEventAsync(
               CloudEvent cloudEvent,
               ILogger log)
        {
             {{ cloudEvents.DispatchToHandlerServices( "cloudEvent", groups ) | indent(12) }}
        }
        {%- endif %}

        {%- if uses_amqp_message %}
        public async Task DispatchMessageAsync(
               Amqp.Message amqpMessage,
               ILogger log)
        {
             {{ amqp.DispatchToHandlerServices( "amqpMessage", groups ) | indent(12) }}
        }
        {%- endif %}

        {%- if uses_mqtt_message %}
        public async Task DispatchApplicationMessageAsync(
               MqttApplicationMessage mqttMessage,
               ILogger log)
        {
             {{ mqtt.DispatchToHandlerServices( "mqttMessage", groups ) | indent(12) }}
        }
        {%- endif %}

        private ConsumerEndpoint endpoint;

        {%- if uses_cloudevents_message %}
        public {{ class_name }}(ConsumerEndpoint endpoint, ContentMode contentMode, CloudEventFormatter formatter)
        {
            this.contentMode = contentMode;
            this.formatter = formatter;
            this.endpoint = endpoint;
        }
        {%- endif %}

        {%- if uses_amqp_message or uses_mqtt_message %}
        public {{ class_name }}(ConsumerEndpoint endpoint)
        {
            this.endpoint = endpoint;
        }
        {%- endif %}

        public void Dispose()
        {
            this.endpoint.Dispose();
            this.endpoint = null;
        }

        public ConsumerEndpoint Endpoint
        {
            get 
            {
                return this.endpoint;
            }
        }

        {%- if root.endpoints -%} 
         {%- for endpoint_key in root.endpoints.keys() -%}
         {%- set endpoint = root.endpoints[endpoint_key] -%}
         {%- if endpoint.usage == "consumer" -%}
           {%- set protocol = endpoint.config.protocol | lower -%}
           {%- set options = endpoint.config.options -%}
           {%- set endpoints = endpoint.config.endpoints %}
           {%- set isCloudEvent = not endpoint.format or endpoint.format.lower().startswith("cloudevents") -%}
           {%- set isAmqp = not isCloudEvent and endpoint.format.lower().startswith("amqp") %}
           {%- set isMqtt = not isCloudEvent and endpoint.format.lower().startswith("mqtt") %}
                
        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(ILogger logger, IEndpointCredential credential {% if isCloudEvent %}, ContentMode contentMode, CloudEventFormatter formatter {% endif %}) 
        {       
            {%- if options %}
            var options = new Dictionary<string, string> {
            {%- for key, value in options.items()%}
                { "{{ key }}" , "{{ value }}" }
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            {%- endif %}
            var endpoints = new List<Uri> {
            {%- for uri in endpoints %}
                new Uri("{{ uri }}")
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            var endpoint = ConsumerEndpoint.Create(logger, credential, {{ protocol | pascal }}Protocol.Name, {% if options %}options, {% else %}null, {% endif %}endpoints);
            var consumer = new {{ class_name }}(endpoint{% if isCloudEvent %}, contentMode, formatter{% endif %});
            {% if isAmqp %}
            if ( endpoint is AmqpConsumerEndpoint)
            {
                var amqpEndpoint = endpoint as AmqpConsumerEndpoint;
                amqpEndpoint.DispatchMessageAsync += consumer.DispatchMessageAsync;
            }
            {% endif %}
            {% if isMqtt %}
            if ( endpoint is MqttConsumerEndpoint)
            {
                var mqttEndpoint = endpoint as MqttConsumerEndpoint;
                mqttEndpoint.DispatchApplicationMessageAsync += consumer.DispatchApplicationMessageAsync;
            }
            {% endif %}
            {% if isCloudEvent %}
            endpoint.DispatchAsync += consumer.DispatchAsync;
            {% endif %}
            return consumer;
        }
        {%- endif -%}
        {%- endfor -%}
        {% endif %}
    }

}
{% endfor %}