{%- import "cloudEvents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set groups = root.groups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_amqp_message = (root | exists( "format", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
{%- set uses_mqtt_message = (root | exists( "format", "mqtt" )) %}
{%- set uses_mqtt_endpoint = (root | exists( "protocol", "mqtt" )) %}
// this file was generated by a tool 

using CloudNative.CloudEvents;
using CloudNative.CloudEvents.Experimental.Endpoints;
using CloudNative.CloudEvents.SystemTextJson;
{%- if uses_amqp_message %}
{{ amqp.AmqpNetLiteHeaders() }}
{%- endif %}
{%- if uses_mqtt_message %}
{{ mqtt.MqttNetHeaders() }}
{%- endif %}
using Microsoft.Extensions.Logging;
 
{% for group_key, group in groups.items() -%}
{%- set pascalGroupName = group.id | default(group_key) | pascal -%}
namespace {{ project_name | pascal }}.{{ pascalGroupName }}
{
     public partial class EventProducer
     {
         {%- if uses_cloudevents_message %}
         private readonly ContentMode contentMode;
         private readonly CloudEventFormatter formatter;
         {%- endif %}
         private readonly ProducerEndpoint endpoint;
 
         public EventProducer(ProducerEndpoint endpoint{%- if uses_cloudevents_message -%}, ContentMode contentMode, CloudEventFormatter formatter{%- endif -%})
         {
            {%- if uses_cloudevents_message %}
             this.contentMode = contentMode;
             this.formatter = formatter;
            {%- endif %}
             this.endpoint = endpoint;
         }

         public ProducerEndpoint Endpoint
         {
            get 
            {
                return this.endpoint;
            }
         }
 
         {%- if root.endpoints -%} 
         {%- for endpoint_key in root.endpoints.keys() -%}
         {%- set endpoint = root.endpoints[endpoint_key] -%}
         {%- if endpoint.usage == "producer" -%}
           {%- set protocol = endpoint.config.protocol | lower -%}
           {%- set options = endpoint.config.options -%}
           {%- set endpoints = endpoint.config.endpoints %}
                
        public static EventProducer CreateFor{{ endpoint_key | pascal | strip_namespace }}(ILogger logger, IEndpointCredential credential {% if uses_cloudevents_message %}, ContentMode contentMode, CloudEventFormatter formatter {% endif %}) 
        {       
            {%- if options %}
            var options = new Dictionary<string, string> {
            {%- for key, value in options.items()%}
                { "{{ key }}" , "{{ value }}" }
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            {%- endif %}
            var endpoints = new List<Uri> {
            {%- for uri in endpoints %}
                new Uri("{{ uri }}")
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            return new EventProducer(ProducerEndpoint.Create(logger, credential, {{ protocol | pascal }}Protocol.Name, {% if options %}options, {% else %}null, {% endif %}endpoints){%- if uses_cloudevents_message %}, contentMode, formatter{%- endif %});
        }
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

        {% for id in group.definitions -%}
        {%- set definition = group.definitions[id] -%}
        {%- set pascalDefinitionName = definition.id | pascal %}
        {%- set isCloudEvent = not definition.format or definition.format.lower().startswith("cloudevents") -%}
        {%- set isAmqp = not isCloudEvent and definition.format.lower().startswith("amqp") %}
        {%- set isMqtt = not isCloudEvent and definition.format.lower().startswith("mqtt") %}
        public async Task Send{{ pascalDefinitionName | strip_namespace }}Async(
        {%- if definition.schemaurl -%}
        {{ definition.schemaurl | schema_type | strip_namespace | pascal }} data
        {%- else -%}
        object data
        {%- endif %}    
        {%- if isCloudEvent -%}
        {{- cloudEvents.DeclareUriTemplateArguments(definition) -}}
        {%- elif isAmqp -%}
        {{- amqp.DeclareUriTemplateArguments(definition) -}}
        {%- elif isMqtt -%}
        {{- mqtt.DeclareUriTemplateArguments(definition) -}}
        {%- endif -%}
        )
        {
            {%- if isCloudEvent %}
            {{- cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", definition) | indent(12)}}
            cloudEvent.Data = data;
            await endpoint.SendAsync(cloudEvent, contentMode, formatter);
            {%- elif isAmqp %}
            {{- amqp.DeclareAmqpNetLiteMessage("amqpMessage", definition) | indent(12)}}
            amqpMessage.BodySection = new Data() { Binary = data.ToByteArray() };
            await ((AmqpProducerEndpoint)endpoint).SendAsync(amqpMessage);
            {%- elif isMqtt %}
            {{- mqtt.DeclareMqttNetMessage("mqttMessage", definition) | indent(12)}}
            mqttMessage.Payload = data.ToByteArray();
            await ((MqttProducerEndpoint)endpoint).SendAsync(mqttMessage);
            {%- endif %}
        }
        {% endfor %}
    }
}
{% endfor -%}