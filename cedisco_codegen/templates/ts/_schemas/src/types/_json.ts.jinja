// this file was generated by a tool 
{%- set schema_name = class_name | pascal -%}
{%- set list_type = "Array" %}
{%- set schema = root %}

{%- macro getTypeScriptType(propertyName, property) %}
    {%- set typeScriptType = "" -%}
    {%- if property.type == 'integer' or property.type == 'number' -%}
        {%- set typeScriptType = "number" -%}
    {%- elif property.type == 'string' -%}
        {%- if property.format == 'date-time' -%}
            {%- set typeScriptType = "Date" -%}
        {%- elif property.format == 'date' -%}
            {%- set typeScriptType = "Date" -%}
        {%- elif property.format == 'time' -%}
            {%- set typeScriptType = "Date" -%}
        {%- else -%}
            {%- set typeScriptType = "string" -%}
        {%- endif -%}
    {%- elif property.type == 'array' -%}
        {%- if property.items.type == 'integer' or property.items.type == 'number' -%}
            {%- set typeScriptType = list_type+"<number>" -%}
        {%- elif property.items.type == 'string' -%}
            {%- if property.items.format == 'date-time' or property.items.format == 'date' or property.items.format == 'time' -%}
                {%- set typeScriptType = list_type+"<Date>" -%}
            {%- else -%}
                {%- set typeScriptType = list_type+"<string>" -%}
            {%- endif -%}
        {%- elif property.items['$ref'] -%} 
            {%- set ref = property.items['$ref'] -%}
            {%- set typeScriptType = list_type+"<"+(ref | schema_type | pascal)+">" -%}
        {%- elif 'type' in property['items'] and property['items']['type'] == "object" and 'properties' in property['items'] -%}
            {% set itemTypeScriptType = schema_name + ((propertyName + "Item") | pascal) %}
            {%- set typeScriptType = list_type+"<"+itemTypeScriptType+">" -%}
            {%- if not itemTypeScriptType in stack("classes") -%}
            {{ emitclass( property['items'], itemTypeScriptType) | push(schema_name) }}
            {%- endif -%}
        {%- else -%}
            {%- set typeScriptType = list_type+"<object>" -%}
        {%- endif -%}
    {%- else -%}
        {%- set typeScriptType = "object" -%}
    {%- endif -%}
    {%- if (not property.type) or property.type == "object"  -%}
        {%- if property['$ref'] -%}
            {%- set ref = property['$ref'] -%}
            {%- set typeScriptType = ref | schema_type | pascal -%}
        {%- elif property.properties -%}
            {%- set typeScriptType = schema_name + ( propertyName | pascal ) -%}
            {%- if not typeScriptType in stack("classes") -%}
            {{ emitclass( property, typeScriptType ) | push(schema_name) }}
            {%- endif -%}
        {%- endif -%}
    {%- endif -%}
    {{ typeScriptType }}
{%- endmacro -%}

{%- macro emitclass(type, type_name) -%}
{%- if type.type == 'object' or not type.type -%}
{{- type_name | pascal | push("classes") }}
{{- type_name | pascal | push(schema_name+"_classes") }}
export class {{ type_name | pascal }}
{%- if type.allOf -%}
    {%- for allOfType in type.allOf -%}
        {%- if loop.first -%}
        {%- if allOfType['$ref'] -%}
            : {{ allOfType['$ref'] | schema_type | pascal }}
        {%- endif -%}
        {%- endif -%}
    {%- endfor -%}
{%- endif %}
{
    static fromData(data? : any)
    {
        return new {{ type_name | pascal }}( data );
    }

    public toByteArray() 
    {
        const jsonString = JSON.stringify(this);
        const utf8Encoded = new TextEncoder().encode(jsonString);
        return utf8Encoded;
    }
{% if type.properties %}
     constructor(data?: any) {
{% for pn, property in type.properties.items()  -%}
    {%- set propertyName = pn | strip_invalid_identifier_characters %}
    {%- set typeScriptType = getTypeScriptType(propertyName, property )%}
    {%- if property.enum %}
        this._{{ propertyName | camel }} = (data.{{ propertyName | camel }} as {{ propertyName | pascal }}Enum);
    {%- else %}
        this._{{ propertyName | camel }} = (data.{{ propertyName | camel }} as {{ typeScriptType }});
    {%- endif %}
{%- endfor %}
     }
{% for pn, property in type.properties.items()  -%}
    {%- set propertyName = pn | strip_invalid_identifier_characters %}
    {%- set typeScriptType = getTypeScriptType(propertyName, property )%}
    {%- if property.enum %}
        public enum {{ propertyName | pascal }}Enum
        {
            {% for value in property.enum %}
                {{ value | pascal }} = {{ loop.index - 1 }},
            {% endfor %}
        }
        private {{ propertyName | pascal }}Enum _{{ propertyName }} = {{ propertyName | pascal }}Enum.{{ property.enum[0] | pascal }};
        {%- if property.description %} 
        /// <description>{{property.description}}</description> 
        {%- endif %}
        [JsonPropertyName("{{ propertyName }}")]
        public {{ propertyName | pascal }}Enum {{ propertyName | pascal }}
        {
            get
            {
                return _{{ propertyName }};
            }
            set
            {
                if (!Enum.IsDefined(typeof({{ propertyName | pascal }}Enum), value))
                {
                    throw new RangeError("{{ propertyName | pascal }}", ExceptionMessages.ValueIsInvalid);
                }
                _{{ propertyName }} = value;
            }
        }
    {%- else %}
    _{{ propertyName | camel }}: {{ typeScriptType }};
    {%- if property.description %} 
    /// <description>{{property.description}}</description> 
    {%- endif %}
    get {{ propertyName | camel }}()
    {
        return this._{{ propertyName }};
    }
    set {{ propertyName | camel }}(value)
    {
        {%- if property.minimum -%}
        if (value < {{ property.minimum }})
        {
            throw new RangeError("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooSmall, value, {{ property.minimum }}));
        }
        {%- endif -%}
        {%- if property.exclusiveMinimum -%}
        if (value <= {{ property.exclusiveMinimum }})
        {
            throw new RangeError("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooSmall, value, {{ property.exclusiveMinimum }}));
        }
        {%- endif -%}
        {%- if property.maximum -%}
        if (value > {{ property.maximum }})
        {
            throw new RangeError("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooBig, value, {{ property.maximum }}));
        }
        {%- endif -%}
        {%- if property.exclusiveMaximum -%}
        if (value >= {{ property.exclusiveMaximum }})
        {
            throw new RangeError("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooBig, value, {{ property.exclusiveMaximum }}));
        }
        {%- endif -%}
            {%- if property.maxLength -%}
        if (value.ToString().Length > {{ property.maxLength }})
        {
            throw new RangeError("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooLong, value, {{ property.maxLength }}));
        }
        {%- endif -%}
        {%- if property.minLength -%}
        if (value.ToString().Length < {{ property.minLength }})
        {
            throw new RangeError("{{ propertyName | pascal }}", string.Format(ExceptionMessages.ValueIsTooShort, value, {{ property.minLength }}));
        }
        {%- endif -%}
        {%- if property.pattern -%}
        if (!System.Text.RegularExpressions.Regex.IsMatch(value.ToString(), RegexPatterns.{{ property.pattern | pascal }}))
        {
            throw new RangeError("{{ propertyName | pascal }}", ExceptionMessages.ValueIsInvalid);
        }
        {%- endif -%}
        {%- if property.format == "email" -%}
        if (!System.Text.RegularExpressions.Regex.IsMatch(System.Text.Json.JsonSerializer.Serialize(value), RegexPatterns.Email, System.Text.RegularExpressions.RegexOptions.Singleline))
        {
            throw new System.ArgumentException(ExceptionMessages.ValueIsNotAnEmail, "{{ propertyName | pascal }}");
        }
        {%- endif %}
        this._{{ propertyName }} = value;
    }
    {% endif -%}
{%- endfor -%}
{%- endif %}
}
{% endif -%}
{%- endmacro %}



{{- emitclass(schema, schema_name) }}

{% for item in stack(schema_name) %}
  {{ item }}
{%- endfor %}
