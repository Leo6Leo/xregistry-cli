{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- set groups = root.groups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set function_name = project_name | pascal -%}

using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using CloudNative.CloudEvents;
using CloudNative.CloudEvents.Protobuf;
using CloudNative.CloudEvents.Avro;
using AvroEventFormatter = CloudNative.CloudEvents.Avro.AvroEventFormatter;
using CloudNative.CloudEvents.SystemTextJson;
using CloudNative.CloudEvents.AspNetCore;

namespace {{ project_name | pascal }}
{
    {%- set class_name = (project_name | pascal | strip_namespace)+"Functions" %}
    public class {{ class_name }}
    {
       {{ cloudEvents.DeclareDispatchObjectsFields( groups ) | indent(8) }}
        {{ cloudEvents.DeclareDispatchObjectsConstructor( project_name, class_name, groups, "", "") | indent(8) }}

        [FunctionName("{{ project_name | pascal | concat_namespace }}")]
        public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "post", "options", Route = null)] HttpRequest req,
            ILogger log,
            CancellationToken cancellationToken)
        {
            if(req.Method == "OPTIONS")
            {
                var origin = req.Headers["WebHook-Request-Origin"];
                if (!string.IsNullOrEmpty(origin) && allowedOrigins.Contains(origin))
                {
                    return new OkResult();
                }
                return new UnauthorizedResult();
            }
            
            CloudEventFormatter formatter = null;
            var contentType = req.ContentType.Split(";")[0];
            if (contentType.EndsWith("+proto"))
            {
            formatter = new ProtobufEventFormatter();
            }
            else if (contentType.EndsWith("+avro"))
            {
                formatter = new AvroEventFormatter();
            }
            else 
            {
                formatter = new JsonEventFormatter();
            }

            var cloudEvent = await req.ToCloudEventAsync(formatter);
            if(cloudEvent == null)
            {
                return new NoContentResult();
            }

            {{ cloudEvents.DispatchToDispatchObjects( "cloudEvent", groups ) | indent(12) }}

            return new NoContentResult();
        }

        private static readonly HashSet<string> allowedOrigins = new();

        static {{ class_name }}()
        {
            var config = new ConfigurationBuilder()
                .AddJsonFile("local.settings.json", optional: true, reloadOnChange: true)
                .AddEnvironmentVariables()
                .Build();

            if (config["ALLOWED_ORIGINS"] != null)
            {
                foreach( var s in config["ALLOWED_ORIGINS"].Split(';') )
                {
                    allowedOrigins.Add(s);
                }
            }
        }
    }
}