{#- CloudEvents macros -#}

{#- Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates -#}
{%- macro DeclareUriTemplateArguments(definition) -%}
{%- for attrname in definition.metadata.attributes -%}
{%- set attribute = definition.metadata.attributes[attrname] -%}
    {%- if attribute.type == "uritemplate" -%}
        {%- for placeholder in attribute.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
        , string {{ placeholder }}
        {%- endfor -%}
    {%- elif attribute.value is not defined -%}
        {%- if not attrname == "time" and not attrname == "id" -%}
        , string {{ attrname }}{%- if not attribute.required %} = default {%- endif %}{% endif -%}
    {%- endif -%}
{%- endfor -%} 
{%- endmacro -%}

{#- Generates a CloudNative.CloudEvents.CloudEvent object from cloudEventDefinition as definition -#}
{%- macro DeclareCloudNativeCloudEvent(variable, definition) -%}
CloudEvent {{ variable }} = new CloudEvent()
{
{%- for attrname in definition.metadata.attributes -%}
{%- set attribute = definition.metadata.attributes[attrname] -%}
{%- if attrname in ["subject", "type", "datacontenttype"] -%}
    {%- set attrProp = attrname | pascal | replace("Datacontenttype", "DataContentType") %}
    {{ attrProp }} = {% if attribute.value -%}$"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%},
{%- endif -%}
{%- if attrname in [ "source", "dataschema"] -%}
    {%- set attrProp = attrname | pascal | replace("Dataschema", "DataSchema") %}
    {{ attrProp }} = {% if attribute.value -%}new Uri($"{{ attribute.value }}", UriKind.RelativeOrAbsolute){%- else -%}{{ attrname }}{%- endif -%},
{%- endif -%}
{%- if attrname in ["time"] %}
    {{ attrname | pascal }} = {% if attribute.value -%}
        {%- if attribute.value == "0001-01-01T00:00:00+00:00" -%}
            DateTime.UtcNow
        {%- else -%}   
            DateTime.Parse("{{- attribute.value -}}")
        {%- endif -%}
        {%- else -%}
            DateTime.UtcNow
        {%- endif -%},
{%- endif -%}
{%- if attrname in ["id"] %}
    {{ attrname | pascal }} = Guid.NewGuid().ToString(),
{%- endif -%}
{%- endfor %}
};
{% for attrname in definition.metadata.attributes -%}
{%- set attribute = definition.metadata.attributes[attrname] -%}
{%- if attrname not in ["id", "time", "source", "subject", "type", "dataschema", "datacontenttype", "source"] -%}
cloudEvent.SetAttributeAsString("{{ attrname }}",{%- if attribute.value -%}"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%});
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{#- Generates a CloudNative.CloudEvents.CloudEvent object from cloudEventDefinition as definition -#}
{%- macro DeclareCloudNativeCloudEventFromJson(variable, json, definition) -%}
};
{% for attrname in definition.metadata.attributes -%}
{%- set attribute = definition.metadata.attributes[attrname] -%}
{%- if attrname not in ["id", "time", "source", "subject", "type", "dataschema", "datacontenttype", "source"] -%}
cloudEvent.SetAttributeAsString("{{ attrname }}",{%- if attribute.value -%}"{{ attribute.value }}"{%- else -%}{{ attrname }}{%- endif -%});
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsArgs(definitionGroups, withType) -%}
{%- for definitiongroup_key, definitiongroup in definitionGroups.items() if (definitiongroup | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal %}
{%- if withType -%}I{{ pascalGroupName | strip_namespace }}Dispatcher {% endif %}{{ definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel }}Dispatcher{%- if not loop.last %}, {%- endif -%}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsFields(definitionGroups) -%}
{%- for definitiongroup_key, definitiongroup in definitionGroups.items() if (definitiongroup | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal %}
I{{ pascalGroupName | strip_namespace }}Dispatcher _{{ definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel }}Dispatcher;
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, definitionGroups, args, body) -%}
{%- if definitionGroups | exists("format", "cloudevents" ) %}
public {{ class_name }}( {{ args }}{%- if args %}, {%- endif -%}
    {%- for definitiongroup_key, definitiongroup in definitionGroups.items() -%}
    {%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal -%} 
    I{{ pascalGroupName | strip_namespace }}Dispatcher {{ definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel }}Dispatcher
    {%- if not loop.last -%}, {%- endif -%}
    {%- endfor -%}
)
{
    {%- for definitiongroup_key, definitiongroup in definitionGroups.items() -%}
    {%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal %}
    this._{{ definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel }}Dispatcher = {{ definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel }}Dispatcher;
    {%- endfor %}
    {{ body | indent(4) }}
}
{% endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObjects(cloudEvent, definitionGroups) -%}
{%- if definitionGroups | exists("format", "cloudevents" ) -%}
var cloudEventType = {{ cloudEvent }}.Type;
switch (cloudEventType)
{
    {% for definitiongroup_key, definitiongroup in definitionGroups.items() if (definitiongroup | exists("format", "cloudevents" )) -%}
    {% for id, definition in definitiongroup.definitions.items() -%}
    {% set pascalDefinitionName = definition.id | pascal %}
    case "{{ definition.id }}":
        if ( this._{{ definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel }}Dispatcher != null )
        {
            await this._{{ definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel }}Dispatcher.On{{ pascalDefinitionName | strip_namespace }}Async({{ cloudEvent }},
                {%- if definition.schemaUrl -%}
            {{ definition.schemaUrl | schema_type | strip_namespace  | pascal }}.FromData({{ cloudEvent }}.Data)
            {%- else -%}
            {{ cloudEvent }}.Data
            {%- endif %});
            break;
        }
        break;
    {% endfor %}
    {% endfor %}
    default:
        log.LogError("Unsupported CloudEvent type {eventType}", cloudEventType);
        break;
}
{%- endif -%}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, root) -%}
{%- set definitionGroups = root.definitionGroups -%}
{%- if definitionGroups | exists("format", "cloudevents" ) %}
{%- set function_name = project_name | pascal -%}
using System.Threading.Tasks;
using CloudNative.CloudEvents;

{%- for definitiongroup_key, definitiongroup in definitionGroups.items() if (definitiongroup | exists("format", "cloudevents" )) -%}
{%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal %}
namespace {{ pascalGroupName | namespace(project_name) | pascal }}
{
    public interface I{{ pascalGroupName | strip_namespace }}Dispatcher
    {
        {%- for id, definition in definitiongroup.definitions.items() if (definition | exists( "format", "cloudevents" )) -%}
        {%- set pascalDefinitionName = definition.id | strip_namespace | pascal -%}
        {%- if definition.schemaUrl -%}
        {%- set dataType = definition.schemaUrl | schema_type | strip_namespace  | pascal -%}
        {%- else -%}
        {%- set dataType = "object" -%}
        {%- endif %}   
        Task On{{ pascalDefinitionName | strip_namespace }}Async(CloudEvent cloudEvent, {{ dataType }} data);
        {%- endfor %}
    }
}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}