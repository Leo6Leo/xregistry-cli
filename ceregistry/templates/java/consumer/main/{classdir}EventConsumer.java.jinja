{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set groups = root.groups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_http_endpoint = (root | exists( "protocol", "http" )) %}
{%- set uses_amqp_message = (root | exists( "format", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
{%- set uses_mqtt_message = (root | exists( "format", "mqtt" )) %}
{%- set uses_mqtt_endpoint = (root | exists( "protocol", "mqtt" )) %}
// this file was generated by a tool 
package {{ project_name | lower }};

import io.cloudevents.experimental.endpoints.ConsumerEndpoint;
import io.cloudevents.experimental.endpoints.IEndpointCredential;
{%- if uses_http_endpoint %}
import io.cloudevents.experimental.endpoints.http.HttpProtocol;
{%- endif %}
{%- if uses_amqp_endpoint %}
import io.cloudevents.experimental.endpoints.amqp.AmqpProtocol;
{%- endif %}
{%- if uses_amqp_message %}
{{ amqp.AmqpImports() }}
import io.cloudevents.experimental.endpoints.amqp.AmqpConsumerEndpoint.DispatchMessageAsync;
{%- endif %}
{%- if uses_mqtt_message %}
{{ mqtt.PahoImports() }}
import io.cloudevents.experimental.endpoints.mqtt.MqttConsumerEndpoint.DispatchMqttMessageV5Async;
{%- endif %}
{%- if uses_cloudevents_message %}
import io.cloudevents.CloudEvent;
import io.cloudevents.experimental.endpoints.ConsumerEndpoint.DispatchCloudEventAsync;
{%- endif %}
import java.util.concurrent.CompletableFuture;
import java.util.ArrayList;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

{% for group_key, group in groups.items() -%}
{%- set pascalGroupName = group.id | default(group_key) | pascal -%}
{%- set className = (pascalGroupName | strip_namespace)+"EventConsumer" %}
public class {{ className }}
{
    private Logger _logger = LogManager.getLogger({{ className }}.class);
    private ConsumerEndpoint endpoint;
    
    {%- if uses_cloudevents_message %}
    {{ cloudEvents.DeclareDispatchObjectsFields( groups ) | indent(4) }}
    {{ cloudEvents.DeclareDispatchObjectsConstructor( project_name, className, groups, "ConsumerEndpoint endpoint", "this.endpoint = endpoint;") | indent(4) }}
    {%- endif %}
    {%- if uses_amqp_message %}
    {{ amqp.DeclareDispatchObjectsFields( groups ) | indent(4) }}
    {{ amqp.DeclareDispatchObjectsConstructor( project_name, className, groups, "ConsumerEndpoint endpoint", "this.endpoint = endpoint;") | indent(4) }}
    {%- endif %}
    {%- if uses_mqtt_message %}
    {{ mqtt.DeclareDispatchObjectsFields( groups ) | indent(4) }}
    {{ mqtt.DeclareDispatchObjectsConstructor( project_name, className, groups, "ConsumerEndpoint endpoint", "this.endpoint = endpoint;") | indent(4) }}
    {%- endif %}

    {%- if uses_cloudevents_message %}
    public CompletableFuture<Void> dispatchCloudEventAsync(
            CloudEvent cloudEvent)
    {
            {{ cloudEvents.DispatchToDispatchObjects( "cloudEvent", groups ) | indent(12) }}
    }
    {%- endif %}

    {%- if uses_amqp_message %}
    public CompletableFuture<Void> dispatchMessageAsync(
            Message amqpMessage, MessageContext messageContext)
    {
            {{ amqp.DispatchToDispatchObjects( "amqpMessage", groups ) | indent(12) }}
    }
    {%- endif %}

    {%- if uses_mqtt_message %}
    public CompletableFuture<Void> dispatchMqttMessageV5Async(
            MqttMessageV5 mqttMessage)
    {
            {{ mqtt.DispatchToDispatchObjects( "mqttMessage", groups ) | indent(12) }}
    }

    public CompletableFuture<Void> dispatchMqttMessageV3Async(
            MqttMessageV3 mqttMessage)
    {
            {{ mqtt.DispatchToDispatchObjects( "mqttMessage", groups ) | indent(12) }}
    }
    {%- endif %}

    public void close() throws Exception
    {
        this.endpoint.close();
        this.endpoint = null;
    }

    public ConsumerEndpoint getEndpoint()
    {
        return this.endpoint;
    }

    {%- if root.endpoints -%} 
        {%- for endpoint_key in root.endpoints.keys() -%}
        {%- set endpoint = root.endpoints[endpoint_key] -%}
        {%- if endpoint.usage == "consumer" -%}
        {%- set protocol = endpoint.config.protocol | lower -%}
        {%- set options = endpoint.config.options -%}
        {%- set endpoints = endpoint.config.endpoints %}
        {%- set isCloudEvent = not endpoint.format or endpoint.format.lower().startswith("cloudevents") -%}
        {%- set isAmqp = not isCloudEvent and endpoint.format.lower().startswith("amqp") %}
        {%- set isMqtt = not isCloudEvent and endpoint.format.lower().startswith("mqtt") %}
            
    public static {{ className }} createFor{{ endpoint_key | pascal | strip_namespace }}(IEndpointCredential credential, {{ cloudEvents.DeclareDispatchObjectsArgs( groups, true ) }}{{ amqp.DeclareDispatchObjectsArgs( groups, true ) }}{{ mqtt.DeclareDispatchObjectsArgs( groups, true ) }}) 
    {       
        {%- if options %}
        var options = new java.util.HashMap<String, String>();
        {%- for key, value in options.items()%}
        options.put("{{ key }}" , "{{ value }}" );
        {%- endfor %}
        {%- endif %}
        var endpoints = new ArrayList<java.net.URI>();
        {%- for uri in endpoints %}
        endpoints.add(java.net.URI.create("{{ uri }}"));
        {%- endfor %}
        var endpoint = ConsumerEndpoint.create(credential, {{ protocol | pascal }}Protocol.NAME, {% if options %}options, {% else %}null, {% endif %}endpoints);
        var consumer = new {{ className }}(endpoint, {{ cloudEvents.DeclareDispatchObjectsArgs( groups, false ) -}}{{ amqp.DeclareDispatchObjectsArgs( groups, false ) -}}{{ mqtt.DeclareDispatchObjectsArgs( groups, false ) -}});
        {%- if isAmqp %}
        if ( endpoint isinstanceof AmqpConsumerEndpoint)
        {
            var amqpEndpoint = endpoint as AmqpConsumerEndpoint;
            amqpendpoint.subscribe(new DispatchMessageAsync() {
                @Override
                public void onMessage(Message arg0) {
                    consumer.dispatchMessageAsync(arg0);
            }          
        });
        }
        {%- endif %}
        {%- if isMqtt %}
        if ( endpoint isinstanceof MqttConsumerEndpoint)
        {
            var mqttEndpoint = endpoint as MqttConsumerEndpoint;
            mqttEndpoint.subscribe(new DispatchMqttMessageV5Async() {
                @Override
                public void onMessage(org.eclipse.paho.mqttv5.common.packet.MqttWireMessage arg0) {
                    consumer.dispatchMqttMessageV5Async(arg0);
                }          
            });
        }
        {%- endif %}
        {%- if isCloudEvent %}
        endpoint.subscribe(new DispatchCloudEventAsync() {
            @Override
            public void onEvent(CloudEvent arg0) {
                consumer.dispatchCloudEventAsync(arg0);
            }          
        });
        {%- endif %}
        return consumer;
    }
    {%- endif -%}
    {%- endfor -%}
    {% endif %}
}
{% endfor %}