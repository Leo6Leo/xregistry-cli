{#- MQTT macros -#}

{%- macro PahoImports() -%}
import org.eclipse.paho.client.mqttv3.MqttMessage as MqttMessageV2;
iomport org.eclipse.paho.mqttv5.common.packet.MqttWireMessage as MqttMessageV5;
{%- endmacro -%}

{%- macro EmitArguments(props) -%}
{%- for propname, prop in props.items() %}
{%- if propname != "user-properties" -%}
{%- if propname == "qos" -%}{%- set propname = "qualityOfServiceLevel" -%}{%- endif -%}
{%- if propname == "topic-name" -%}{%- set propname = "topic" -%}{%- endif -%}
{%- if propname == "content-type" -%}{%- set propname = "contentType" -%}{%- endif -%}
{%- if propname == "response-topic" -%}{%- set propname = "responseTopic" -%}{%- endif -%}
{%- if propname == "payload-format" -%}{%- set propname = "payloadFormatIndicator" -%}{%- endif -%}
{%- if propname == "correlation-data" -%}{%- set propname = "correlationData" -%}{%- endif -%}
{%- if propname == "retain" -%}{%- set propname = "retain" -%}{%- endif -%}
{%- if prop.type == "uritemplate" -%}
   {%- for placeholder in prop.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
   , String {{ placeholder }}
   {%- endfor -%}
{%- elif prop.value is not defined -%}
   , String {{ propname }}{%- if not prop.required %} = default {%- endif %}
{%- endif -%}
{%- endif -%}
{%- endfor -%}
{%- if "user-properties" in props %}
  {%- for prop in props["user-properties"] %}
  {%- if prop.type == "uritemplate" -%}
   {%- for placeholder in prop.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
   , String {{ placeholder }}
   {%- endfor -%}
   {%- elif prop.value is not defined -%}
   , String {{ prop.name }}{%- if not prop.required %} = default {%- endif -%}
   {%- endif -%}
  {%- endfor %}
{%- endif -%}
{%- endmacro -%}

{#- Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates -#}
{%- macro DeclareUriTemplateArguments(definition) -%}
{%- if definition.metadata["properties"] -%}{{ EmitArguments(definition.metadata["properties"]) }}{%- endif -%}
{%- endmacro %}

{#- Helper macro for assigning properties -#}
{%- macro AssignProps(props, as_dict = False) -%}
{%- for propname, prop in props.items() -%}
{%- if propname != "user-properties" -%}
{%- if propname == "qos" -%}{%- set propname = "qualityOfServiceLevel" -%}{%- endif -%}
{%- if propname == "topic-name" -%}{%- set propname = "topic" -%}{%- endif -%}
{%- if propname == "content-type" -%}{%- set propname = "contentType" -%}{%- endif -%}
{%- if propname == "response-topic" -%}{%- set propname = "responseTopic" -%}{%- endif -%}
{%- if propname == "payload-format" -%}{%- set propname = "payloadFormatIndicator" -%}{%- endif -%}
{%- if propname == "correlation-data" -%}{%- set propname = "correlationData" -%}{%- endif -%}
{%- if as_dict %}
["{{ propname }}"] = {% else %}
{{ propname | pascal }} = {% endif -%}
{%- if prop.value is defined -%}
   {%- if prop.type in ["integer", "number", "boolean"] -%}
      {%- if propname == "qualityOfServiceLevel" -%}
         (MqttQualityOfServiceLevel){{ prop.value }}
      {%- elif propname == "payloadFormatIndicator" -%}
         (MqttPayloadFormatIndicator){{ prop.value }}
      {%- else -%}
         {{ prop.value | lower }}
      {%- endif -%}
   {%- else -%}
      $"{{ prop.value }}"
   {%- endif -%}
{%- else -%}
   {{ propname }}
{%- endif -%},
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{#- Helper macro for assigning user properties -#}
{%- macro AssignUserProps(props) -%}
{%- for prop in props["user-properties"] %}
new MqttUserProperty("{{ prop.name }}", 
{%- if prop.value -%}
   {%- if prop.type in ["integer", "number", "boolean"] -%}
      {{ prop.value }}
   {%- else -%}
      $"{{ prop.value }}"
   {%- endif -%}
{%- else -%}
   {{ prop.name }}
{%- endif -%}){%- if not loop.last -%},{% endif %}
{%- endfor -%}
{%- endmacro -%}

{#- Generates AMQP message objects from mqttDefinition as definition -#}
{%- macro DeclareMqttNetMessage(variable, definition) -%}
{%- set properties = definition.metadata["properties"] %}
MqttApplicationMessage {{ variable }} = new MqttApplicationMessage()
{
   {{- AssignProps(properties) | indent(3) }}
   UserProperties = new List<MqttUserProperty> {
      {{- AssignUserProps(properties) | indent(9) }}
   }
};
{%- endmacro -%}


{%- macro DeclareDispatchObjectsArgs(definitionGroups, withType) -%}
{%- for definitiongroup_key, definitiongroup in definitionGroups.items() if (definitiongroup | exists("format", "mqtt" )) -%}
{%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal %}
{%- if withType -%}I{{ pascalGroupName | strip_namespace }}Dispatcher {% endif %}{{ definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel }}MqttDispatcher{%- if not loop.last %}, {%- endif -%}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsFields(definitionGroups) -%}
{%- for definitiongroup_key, definitiongroup in definitionGroups.items() if (definitiongroup | exists("format", "mqtt" )) -%}
{%- set handlerName=(definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel)+"MqttDispatcher" -%}
{%- set handlerType="I"+(definitiongroup.id | default(definitiongroup_key) | strip_namespace | pascal)+"MqttDispatcher" -%}
{{ handlerType }} _{{ handlerName }};
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, definitionGroups, args, body) -%}
{%- if definitionGroups | exists("format", "mqtt" ) %}
{{ class_name }}({{ args }}{%- if args %}, {%- endif -%}
    {%- for definitiongroup_key, definitiongroup in definitionGroups.items() -%}
    {%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal -%} 
    {%- set handlerName=(definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel)+"MqttDispatcher" -%}
    {%- set handlerType="I"+(definitiongroup.id | default(definitiongroup_key) | strip_namespace | pascal)+"MqttDispatcher" -%}
    {{ handlerType }} {{ handlerName }}
    {%- if not loop.last -%}, {%- endif -%}
    {%- endfor -%})
{
    {% for definitiongroup_key, definitiongroup in definitionGroups.items() -%}
    {%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal %}
    {%- set handlerName=(definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel)+"MqttDispatcher" -%}
   {%- set handlerType="I"+(definitiongroup.id | default(definitiongroup_key) | strip_namespace | pascal)+"MqttDispatcher" -%}
    this._{{ handlerName }} = {{ handlerName }};
    {%- endfor %}
    {{ body | indent(4) }}
}
{%- endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObjects(message, definitionGroups) -%}
{%- if definitionGroups | exists("format", "mqtt" ) %}
try {
   Regex regex; 
   Match match; 
   var messageTopic = {{ message }}.Topic;
   {% for definitiongroup_key, definitiongroup in definitionGroups.items() if (definitiongroup | exists("format", "mqtt" )) -%}
   {%- set handlerName=(definitiongroup.id | default(definitiongroup_key) | strip_namespace | camel)+"MqttDispatcher" -%}
   {% for id, definition in definitiongroup.definitions.items() if (definition | exists("format", "mqtt" )) -%}
   {% set pascalDefinitionName = definition.id | pascal %}
   regex = new Regex("^" + "{{ definition.metadata.properties.topic.value}}".Replace("{", "(?<").Replace("}", ">[^/]+)") + "$");
   match = regex.Match(messageTopic);
   if (match.Success)
   {
      return this._{{ handlerName }}.On{{ pascalDefinitionName | strip_namespace }}Async({{ message }},
      {%- if definition.schemaUrl -%}
      {{ definition.schemaUrl | schema_type | strip_namespace  | pascal }}.FromData({{ message }}.Payload)
      {%- else -%}
      {{ message }}.Data
      {%- endif %}, match.Groups.Values.Where(g => g.Name != "0").ToDictionary(g => g.Name, g => g.Value));
   }   
   {% endfor %}
   {% endfor %}
} catch ( Exception exception ) {
    _logger.warn("Error while dispatching message", exception);
}
return CompletableFuture.completedFuture(null);
{%- endif -%}
{%- endmacro -%}


{%- macro DeclareDispatchInterfaceV5(project_name, definitiongroup, pascalGroupName, interfaceName) -%}
package {{ pascalGroupName | namespace(project_name) | lower() }};

import io.cloudevents.CloudEvent;
import java.util.concurrent.CompletableFuture;
{{ PahoImports() }}

public interface {{ interfaceName }}
{
    {%- for id, definition in definitiongroup.definitions.items() if (definition | exists( "format", "mqtt" )) -%}
    {%- set pascalDefinitionName = definition.id | strip_namespace | pascal -%}
    {%- if definition.schemaUrl -%}
    {%- set dataType = definition.schemaUrl | schema_type | strip_namespace  | pascal -%}
    {%- else -%}
    {%- set dataType = "Object" -%}
    {%- endif %}   
    CompletableFuture<Void> on{{ pascalDefinitionName | strip_namespace }}Async(MqttMessageV5 mqttMessage, {{ dataType }} data);
    {%- endfor %}
}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, root) -%}
{%- set definitionGroups = root.definitionGroups -%}
{%- if definitionGroups | exists("format", "mqtt" ) %}
{%- for definitiongroup_key, definitiongroup in definitionGroups.items() if (definitiongroup | exists("format", "mqtt" )) -%}
{%- set pascalGroupName = definitiongroup.id | default(definitiongroup_key) | pascal -%}
{%- set interfaceName = "I"+(pascalGroupName | strip_namespace)+"MqttDispatcher" -%}
{{- DeclareDispatchInterfaceV5(project_name, definitiongroup, pascalGroupName, interfaceName) | pushfile(interfaceName+".java") -}}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}