{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_http_endpoint = (root | exists( "protocol", "http" )) %}
{%- set uses_amqp_message = (root | exists( "binding", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
{%- set uses_mqtt_message = (root | exists( "binding", "mqtt" )) %}
{%- set uses_mqtt_endpoint = (root | exists( "protocol", "mqtt" )) %}
// this file was generated by a tool 
package {{ class_name | namespace | lower }};

import io.cloudevents.CloudEvent;
import io.cloudevents.CloudEventData;
import io.cloudevents.core.v1.CloudEventBuilder;
import io.cloudevents.core.format.EventFormat;
import io.cloudevents.core.message.Encoding;
import io.cloudevents.experimental.endpoints.ProducerEndpoint;
import io.cloudevents.experimental.endpoints.IEndpointCredential;

{%- if uses_http_endpoint %}
import io.cloudevents.experimental.endpoints.http.HttpProtocol;
{%- endif %}
{% if uses_amqp_endpoint %}
import io.cloudevents.experimental.endpoints.amqp.Amqp10Protocol;
{% endif %}
{% if uses_mqtt_endpoint %}
import io.cloudevents.experimental.endpoints.mqtt.MqttProtocol;
{% endif %}

{%- if uses_amqp_message %}
{{ amqp.AmqpImports() }}
{%- endif %}
{%- if uses_mqtt_message %}
{{ mqtt.PahoImports() }}
{%- endif %}
import java.util.concurrent.CompletableFuture;
import java.util.ArrayList;


{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set pascalGroupName = messagegroup.id  | pascal -%}
{%- set className = (pascalGroupName | strip_namespace)+"EventProducer" %}
public class {{ className | strip_namespace }}
{
    static {
        {%- if uses_http_endpoint %}
        HttpProtocol.register();
        {%- endif %}
        {%- if uses_amqp_endpoint %}
        Amqp10Protocol.register();
        {%- endif %}
        {%- if uses_mqtt_endpoint %}
        MqttProtocol.register();
        {%- endif %}
    }

    {%- if uses_cloudevents_message %}
    private Encoding encoding;
    private EventFormat eventFormat;
    {%- endif %}
    private ProducerEndpoint endpoint;

    public {{ className }}(ProducerEndpoint endpoint{%- if uses_cloudevents_message -%}, Encoding encoding, EventFormat eventFormat{%- endif -%})  {
    {%- if uses_cloudevents_message %}
        this.encoding = encoding;
        this.eventFormat = eventFormat;
    {%- endif %}
        this.endpoint = endpoint;
    }

    public ProducerEndpoint getEndpoint() {
        return this.endpoint;
    }

    {%- if root.endpoints -%} 
    {%- for endpoint_key in root.endpoints.keys() -%}
    {%- set endpoint = root.endpoints[endpoint_key] -%}
    {%- if endpoint.usage == "producer" -%}
    {%- set protocol = endpoint.config.protocol | lower -%}
    {%- set options = endpoint.config.options -%}
    {%- set endpoints = endpoint.config.endpoints %}
        
    public static {{ className }} createFor{{ endpoint_key | pascal | strip_namespace }}(IEndpointCredential credential {% if uses_cloudevents_message %}, Encoding encoding, EventFormat eventFormat {% endif %})  {       
        {%- if options %}
        var options = new java.util.HashMap<String, String>();
        {%- for key, value in options.items()%}
        options.put("{{ key }}" , "{{ value }}" );
        {%- endfor %}
        {%- endif %}
        var endpoints = new ArrayList<java.net.URI>();
        {%- for epo in endpoints %}
        endpoints.add(java.net.URI.create("{{ epo.uri }}"));
        {%- endfor %}
        return new {{ className }}(ProducerEndpoint.create(credential, {{ protocol | strip_dots | pascal }}Protocol.NAME, {% if options %}options, {% else %}null, {% endif %}endpoints){%- if uses_cloudevents_message %}, encoding, eventFormat{%- endif %});
    }
    {%- endif -%}
    {%- endfor -%}
    {% endif %}

    {% for id in messagegroup.messages -%}
    {%- set definition = messagegroup.messages[id] -%}
    {%- set pascalDefinitionName = definition.id | pascal %}
    {%- set isCloudEvent = not definition.format or definition.format.lower().startswith("cloudevents") -%}
    {%- set isAmqp = not isCloudEvent and definition.format.lower().startswith("amqp") %}
    {%- set isMqtt = not isCloudEvent and definition.format.lower().startswith("mqtt") %}
    public CompletableFuture<Void> send{{ pascalDefinitionName | strip_namespace }}Async(
    {%- if definition.schemaurl -%}
    {%- set toBytes="data.toByteArray()" -%}
    {%- set type = (definition.schemaurl if definition.schemaurl else definition.schema) | schema_type( project_name, root, definition.schemaformat) %}
    {%- set typePackage = type | namespace | lower %}
    {%- set typeName = type | strip_namespace | pascal %}    
    {{ typePackage }}.{{ typeName }} data
    {%- else -%}
    {% set toBytes="data.toBytes()" %}
    CloudEventData data
    {%- endif %}    
    {%- if isCloudEvent -%}
    {{- cloudEvents.DeclareUriTemplateArguments(definition) -}}
    {%- elif isAmqp -%}
    {{- amqp.DeclareUriTemplateArguments(definition) -}}
    {%- elif isMqtt -%}
    {{- mqtt.DeclareUriTemplateArguments(definition) -}}
    {%- endif -%}
    ) throws Exception {
        {% if isCloudEvent %}
        {{- cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", toBytes, definition) | indent(12)}}
        return endpoint.sendAsync(cloudEvent, encoding, eventFormat);
        {%- elif isAmqp %}
        {{- amqp.DeclareAmqpNetLiteMessage("amqpMessage", definition) | indent(12)}}
        amqpMessage.BodySection = new Data() { Binary = {{ toBytes }} };
        return ((AmqpProducerEndpoint)endpoint).sendAsync(amqpMessage);
        {%- elif isMqtt %}
        {{- mqtt.DeclareMqttNetMessage("mqttMessage", definition) | indent(12)}}
        return ((MqttProducerEndpoint)endpoint).sendAsync(mqttMessage);
        {%- endif %}
    }
    {% endfor %}
}
{% endfor -%}