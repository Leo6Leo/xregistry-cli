{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- if not uses_cloudevents_message %}
{%- exit -%}
{%- endif -%}
import * as types from "./types" 
import { httpTransport, emitterFor, CloudEvent } from "cloudevents";
import { v4 as uuidv4 } from "uuid";

{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set pascalGroupName = messagegroup.id  | pascal -%}

export class {{ pascalGroupName | concat_namespace }}EventProducer
{
    credential : any;
    endpoints : any;
    options : any;

    constructor(credential : any, endpoints : any, options : any) {
        this.credential = credential;
        this.endpoints = endpoints;
        this.options = options;
    } 
  
    {%- if root.endpoints -%} 
    {%- for endpoint_key in root.endpoints.keys() -%}
    {%- set endpoint = root.endpoints[endpoint_key] -%}
    {%- if endpoint.usage == "producer" and "http" == (endpoint.config.protocol | lower) -%}
      {%- set protocol = endpoint.config.protocol | lower -%}
      {%- set options = endpoint.config.options -%}
      {%- set endpoints = endpoint.config.endpoints %}
           
   static createFor{{ endpoint_key | pascal | concat_namespace }}(credential : any) 
   {       
       {%- if options %}
       var options = { 
       {%- for key, value in options.items()%}
           { "{{ key }}" , "{{ value }}" }
           {%- if not loop.last -%},{%- endif %}
       {%- endfor %}
       };
       {%- else -%}
       var options = {};
       {%- endif %}
       var endpoints = [
       {%- for epo in endpoints %}
           "{{ epo.uri }}"
           {%- if not loop.last -%},{%- endif %}
       {%- endfor %}
       ];
       return new {{ pascalGroupName | concat_namespace }}EventProducer(credential, endpoints, options);
   }
   {%- endif -%}
   {%- endfor -%}
   {% endif %}

   {% for id in messagegroup.messages -%}
   {%- set definition = messagegroup.messages[id] -%}
   {%- set pascalDefinitionName = definition.id | pascal %}
   {%- set isCloudEvent = not definition.format or definition.format.lower().startswith("cloudevents") -%}
   {%- set isAmqp = not isCloudEvent and definition.format.lower().startswith("amqp") %}
   {%- set isMqtt = not isCloudEvent and definition.format.lower().startswith("mqtt") %}
   async send{{ pascalDefinitionName | strip_namespace }}Async(
   {%- if definition.schemaurl or definition.schema -%}
   {% set dataType = "types." + ((definition.schemaurl if definition.schemaurl else definition.schema) | schema_type( project_name, root, definition.schemaformat) | strip_namespace | pascal) %}
   {%- else -%}
   {% set dataType = "any" %}
   {%- endif %}    
   data : {{ dataType }}
   {{- cloudEvents.DeclareUriTemplateArguments(definition) -}}
   )
   {
       {{ cloudEvents.DeclareCloudEvent("cloudEvent", definition, dataType) | indent(9) }}
       await this._sendAsync(cloudEvent);
   }
   {% endfor %}

   async _sendAsync<T>(cloudEvent : CloudEvent<T>)
   {
       var transport = httpTransport(this.endpoints[0]);
       var emitter = emitterFor(transport);
       var result = await emitter(cloudEvent);
       return result;
   }
}

{% endfor -%}