{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_amqp_message = (root | exists( "format", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
// this file was generated by xRegistry CLI

using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
using Azure;
using Azure.Core;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Producer;

{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set pascalGroupName = messagegroup.id | default(messagegroup_key) | pascal -%}
namespace {{ project_name | pascal }}
{
    {%- set class_name = ( pascalGroupName | strip_namespace )+"ProducerClient" %}
    public partial class {{ class_name }}
    {
        private const string cePrefix = "cloudEvents_";
        private const string applicationOctetStream = "application/octet-stream";
        private readonly EventHubProducerClient eventHubProducerClient;
        public delegate byte[] Serialize<T>(T data, out string contentType);
        private static CloudEventFormatter defaultFormatter = new JsonEventFormatter();

        public {{ class_name }}(EventHubProducerClient eventHubProducerClient)
        {
            this.eventHubProducerClient = eventHubProducerClient;
        }

        public EventHubProducerClient EventHubProducerClient
        {
            get 
            {
                return this.eventHubProducerClient;
            }
        }

        {%- if root.endpoints -%} 
        {%- for endpoint_key in root.endpoints.keys() -%}
        {%- set endpoint = root.endpoints[endpoint_key] -%}
        {%- if endpoint.usage == "producer" -%}
        {%- set protocol = endpoint.config.protocol | lower -%}
        {%- if protocol == "amqp" -%}
        {%- set options = endpoint.config.options -%}
        {%- set endpoints = endpoint.config.endpoints %}
        {%- macro createforbody(class_name, endpoints, options) -%}
            if ( fullyQualifiedNamespace == null )
            {
                {%- if endpoints %}
                fullyQualifiedNamespace = "{{ endpoints[0].uri }}";
                {%- else %}
                throw new ArgumentNullException(nameof(fullyQualifiedNamespace));
                {%- endif %}
            }
            if ( eventHubName == null )
            {
                {%- if options and 'node' in options %}
                eventHubName = "{{ options['node'] }}";
                {%- else %}
                throw new ArgumentNullException(nameof(eventHubName));
                {%- endif %}
            }
            var eventHubProducerClient = new EventHubProducerClient(fullyQualifiedNamespace, eventHubName, credential);
            return new {{ class_name }}(eventHubProducerClient);
        {%- endmacro %}
        
        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(TokenCredential credential, string? fullyQualifiedNamespace = null, string? eventHubName = null) 
        {   
            {{ createforbody(class_name, endpoints, options) }}
        }

        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(AzureNamedKeyCredential credential, string? fullyQualifiedNamespace = null, string? eventHubName = null) 
        {       
            {{ createforbody(class_name, endpoints, options) }}
        }

        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(AzureSasCredential credential, string? fullyQualifiedNamespace = null, string? eventHubName = null) 
        {       
            {{ createforbody(class_name, endpoints, options) }}
        }
        {%- endif -%}
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

        private IEnumerable<EventData> CreateEventData<T>(CloudEvent? cloudEvent, T data, Serialize<T>? bodySerializer = null, CloudEventFormatter? formatter = null) where T : notnull
        {
            if (formatter == null)
            {
                bool isRawBytes = typeof(T) == typeof(byte[]);
                if (bodySerializer == null && !isRawBytes)
                {
                    throw new ArgumentNullException(nameof(bodySerializer));
                }
                var contentType = applicationOctetStream;
                EventData eventData = new EventData(bodySerializer == null ? (byte[])(object)data : bodySerializer(data, out contentType));
                eventData.ContentType = contentType;
                if (cloudEvent != null)
                {
                    foreach (var attr in cloudEvent.GetPopulatedAttributes())
                    {
                        eventData.Properties.Add(cePrefix + attr.Key.Name, attr.Value);
                    }
                }
                yield return eventData;
            }
            else
            {
                if (cloudEvent == null)
                {
                    throw new ArgumentNullException(nameof(cloudEvent));
                }
                cloudEvent.Data = data;
                var eventBody = formatter.EncodeStructuredModeMessage(cloudEvent, out var contentType);
                var eventData = new EventData(eventBody)
                {
                    ContentType = contentType.ToString()
                };
                yield return eventData;
            }
        }

        {% for id in messagegroup.messages -%}
        {%- set definition = messagegroup.messages[id] -%}
        {%- set pascalDefinitionName = definition.id | pascal %}
        {%- set isCloudEvent = not definition.format or definition.format.lower().startswith("cloudevents") -%}
        {%- set isAmqp = not isCloudEvent and definition.format.lower().startswith("amqp") %}
        {%- set isMqtt = not isCloudEvent and definition.format.lower().startswith("mqtt") %}
        {%- if definition.description %}
        /// <summary>
        /// {{ definition.description }}
        /// </summary>
        {%- endif %}
        public async Task Send{{ pascalDefinitionName | strip_namespace }}Async(
        {%- if definition.schemaurl or definition.schema -%}
        {%- set type_name = (definition.schemaurl if definition.schemaurl else definition.schema) | schema_type(root, definition.schemaformat) %}
        {%- if definition.schemaformat.lower().startswith("jsonschema") %}
        {%- set type_name = type_name | pascal %}
        {%- endif %}
        {%- else -%}
        {%- set type_name = "object" %}
        {%- endif -%}
        {{ type_name }} data
        {%- if isCloudEvent -%}
        {{- cloudEvents.DeclareUriTemplateArguments(definition) -}}
        {%- elif isAmqp -%}
        {{- amqp.DeclareUriTemplateArguments(definition) -}}
        {%- elif isMqtt -%}
        {{- mqtt.DeclareUriTemplateArguments(definition) -}}
        {%- endif -%}
        {% if isCloudEvent %}, CloudEventFormatter? formatter = null{% endif %})
        {
            Serialize<{{ type_name }}> bodySerializer = ({{ type_name }} data, out string contentType) => {
                return data.ToByteArray(out contentType);
            };
            {%- if isCloudEvent %}
            {{ cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", definition) | indent(12) }}
            await eventHubProducerClient.SendAsync(CreateEventData(cloudEvent, data, bodySerializer, formatter));
            {%- elif isAmqp %}
            await eventHubProducerClient.SendAsync(CreateEventData(null, data, bodySerializer, null));
            {%- endif %}
        }
        {% endfor %}
    }
}
{% endfor -%}