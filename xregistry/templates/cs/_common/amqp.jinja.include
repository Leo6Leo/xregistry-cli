{#- AMQP macros -#}

{%- macro AmqpNetLiteHeaders() -%}
using Amqp;
using Amqp.Framing;
using Amqp.Types;
{%- endmacro -%}

{%- macro EmitArguments(props) -%}
{%- for propname, prop in props.items() %}
{%- if prop.type == "uritemplate" -%}
   {%- for placeholder in prop.value | regex_search('\\{([A-Za-z0-9_]+)\\}') -%}
   , string {{ placeholder }}
   {%- endfor -%}
{%- elif prop.value is not defined -%}
   , string {{ propname }}{%- if not prop.required %} = default {%- endif %}{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{#- Generates a list of arguments for "send" methods that correspond to placeholders in uritemplates -#}
{%- macro DeclareUriTemplateArguments(message) -%}
{%- if message.message["header"] -%}{{ EmitArguments(message.message["header"]) }}{%- endif -%}
{%- if message.message["footer"] -%}{{ EmitArguments(message.message["footer"]) }}{%- endif -%}
{%- if message.message["message-annotations"] -%}{{ EmitArguments(message.message["message-annotations"]) }}{%- endif -%}
{%- if message.message["delivery-annotations"] -%}{{ EmitArguments(message.message["delivery-annotations"]) }}{%- endif -%}
{%- if message.message["properties"] -%}{{ EmitArguments(message.message["properties"]) }}{%- endif -%}
{%- if message.message["application-properties"] -%}{{ EmitArguments(message.message["application-properties"]) }}{%- endif -%}
{%- endmacro %}

{#- Helper macro for assigning properties -#}
{%- macro AssignProps(props, as_dict = False) -%}
{%- for propname, prop in props.items() -%}
{%- if as_dict %}
["{{ propname }}"] = {% else %}
{{ propname | pascal }} = {% endif -%}
{%- if prop.value -%}
   {%- if prop.type in ["integer", "number", "boolean"] -%}
      {{ prop.value }}
   {%- elif prop.type == "uri" or prop.type == "uritemplate" -%}
      new Uri($"{{ prop.value }}", UriKind.RelativeOrAbsolute),
   {%- else -%}
      $"{{ prop.value }}"
   {%- endif -%}
{%- else -%}
   {{ propname }}
{%- endif -%},
{%- endfor -%}
{%- endmacro -%}

{#- Generates AMQP message objects from amqpDefinition as message -#}
{%- macro DeclareAmqpNetLiteMessage(variable, message) -%}
{%- set header = message.message["header"] %}
{%- set footer = message.message["footer"] %}
{%- set messageAnnotations = message.message["message-annotations"] %}
{%- set deliveryAnnotations = message.message["delivery-annotations"] %}
{%- set properties = message.message["properties"] %}
{%- set applicationProperties = message.message["application-properties"] %}
Amqp.Message {{ variable }} = new Amqp.Message()
{
{%- if header %}
   Header = new Header() 
   {
   {{- AssignProps(header) | indent(6) }}
   },
{%- if footer %}
   Footer = new Footer() 
   {
   {{- AssignProps(footer) | indent(6) }}
   },
{%- endif %}
{%- if messageAnnotations %}
   MessageAnnotations = new MessageAnnotations()
   {
   {{- AssignProps(messageAnnotations) | indent(6) }}
   },
{%- endif %}
{%- if deliveryAnnotations %}
   DeliveryAnnotations = new DeliveryAnnotations()
   {
   {{- AssignProps(deliveryAnnotations) | indent(6) }}
   },
{%- endif %}
{%- if properties %}
   Properties = new Properties()
   {
   {{- AssignProps(properties) | indent(6) }}
   },
{%- endif %}
{%- if applicationProperties %}
   ApplicationProperties = new ApplicationProperties()
   {
   {{- AssignProps(applicationProperties, True) | indent(6) }}
   },
{%- endif %}
{%- endif %}
};
{%- endmacro -%}


{%- macro DeclareDispatchObjectsArgs(messagegroups, withType) -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "amqp" )) -%}
{%- set pascalGroupName = messagegroup.id | default(messagegroup_key) | pascal %}
{%- if withType -%}I{{ pascalGroupName | strip_namespace }}Dispatcher {% endif %}{{ messagegroup.id | default(messagegroup_key) | strip_namespace | camel }}AmqpDispatcher{%- if not loop.last %}, {%- endif -%}
{%- endfor %}
{%- endmacro-%}

{%- macro DeclareDispatchObjectsFields(project_name, class_name, messagegroups) -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "amqp" ) -%}
{%- set handlerName=(messagegroup.id | default(messagegroup_key) | strip_namespace | camel)+"AmqpDispatcher" -%}
{%- set handlerType="I"+(messagegroup.id | default(messagegroup_key) | strip_namespace | pascal)+"AmqpDispatcher" -%}
{{ handlerType }} _{{ handlerName }};
{%- endfor %}
{%- endmacro -%}

{%- macro DeclareDispatchObjectsConstructor(project_name, class_name, messagegroups, args, body) -%}
{%- if messagegroups | exists("binding", "amqp" ) %}
{%- for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "amqp" ) -%}
{%- set pascalGroupName = messagegroup.id | default(messagegroup_key) | pascal %}
{%- set handlerName=(messagegroup.id | default(messagegroup_key) | strip_namespace | camel)+"AmqpDispatcher" -%}
{%- set handlerType="I"+(messagegroup.id | default(messagegroup_key) | strip_namespace | pascal)+"AmqpDispatcher" -%}
{{ handlerType }} _{{ handlerName }};
{%- endfor %}

public {{ class_name }}({{ args }}{%- if args %}, {%- endif -%}
    {%- for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "amqp" ) -%}
    {%- set pascalGroupName = messagegroup.id | default(messagegroup_key) | pascal -%} 
    {%- set handlerName=(messagegroup.id | default(messagegroup_key) | strip_namespace | camel)+"AmqpDispatcher" -%}
    {%- set handlerType="I"+(messagegroup.id | default(messagegroup_key) | strip_namespace | pascal)+"AmqpDispatcher" -%}
    {{ handlerType }} {{ handlerName }}
    {%- if not loop.last -%}, {%- endif -%}
    {%- endfor -%})
{
    {% for messagegroup_key, messagegroup in messagegroups.items() if messagegroup | exists("binding", "amqp" ) -%}
    {%- set pascalGroupName = messagegroup.id | default(messagegroup_key) | pascal %}
    {%- set handlerName=(messagegroup.id | default(messagegroup_key) | strip_namespace | camel)+"AmqpDispatcher" -%}
    {%- set handlerType="I"+(messagegroup.id | default(messagegroup_key) | strip_namespace | pascal)+"AmqpDispatcher" -%}
    this._{{ handlerName }} = {{ handlerName }};
    {%- endfor %}
    {{ body | indent(4) }}
}
{%- endif -%}
{%- endmacro -%}

{%- macro DispatchToDispatchObjects(message, messagegroups) -%}
{%- if messagegroups | exists("binding", "amqp" ) %}
var messageSubject = {{ message }}.Properties.Subject;
switch (messageSubject)
{
   {% for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "amqp" )) -%}
   {%- set handlerName=(messagegroup.id | default(messagegroup_key) | strip_namespace | camel)+"AmqpDispatcher" -%}
   {% for id, message in messagegroup.messages.items() if (message | exists("binding", "amqp" )) -%}
   {% set pascalDefinitionName = message.id | pascal %}
   case "{{ message.id }}":
         if ( this._{{ handlerName }} != null )
         {
            await this._{{ handlerName }}.On{{ pascalDefinitionName | strip_namespace }}Async({{ message }},
               {%- if message.schemaurl -%}
            {{ message.schemaurl | schema_type | strip_namespace  | pascal }}.FromData({{ message }}.Body)
            {%- else -%}
            {{ message }}.Data
            {%- endif %});
            break;
         }
         break;
   {% endfor %}
   {% endfor %}
   default:
      log.LogError($"Unsupported message subject {messageSubject}");
      break;
}
{%- endif -%}
{%- endmacro -%}

{%- macro DeclareDispatchInterfaces(project_name, root) -%}
{%- set messagegroups = root.messagegroups -%}
{%- if messagegroups | exists("binding", "amqp" ) %}
{%- set function_name = project_name | pascal -%}
{%- for messagegroup_key, messagegroup in messagegroups.items() if (messagegroup | exists("binding", "amqp" )) -%}
{%- set pascalGroupName = messagegroup.id | default(messagegroup_key) | pascal %}
{{- AmqpNetLiteHeaders() }}
using System.Threading.Tasks;

namespace {{ pascalGroupName | namespace(project_name) | pascal }}
{
   public interface I{{ pascalGroupName | strip_namespace }}AmqpDispatcher
   {
      {%- for id, message in messagegroup.messages.items() if (message | exists("binding", "amqp" )) -%}
      {%- set pascalDefinitionName = message.id | strip_namespace | pascal -%}
      {%- if message.schemaurl -%}
      {%- set dataType = message.schemaurl | schema_type | strip_namespace  | pascal -%}
      {%- else -%}
      {%- set dataType = "object" -%}
      {%- endif %}   
      Task On{{ pascalDefinitionName | strip_namespace }}Async(Message amqpMessage, {{ dataType }} data);
      {%- endfor %}
   }
}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}