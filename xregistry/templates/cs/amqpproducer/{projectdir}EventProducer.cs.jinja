{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_amqp_message = (root | exists( "binding", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
{%- if uses_amqp_message %}
{{ amqp.AmqpNetLiteHeaders() }}
{%- endif %}
using Microsoft.Extensions.Logging;
 
{% for messagegroup_key, messagegroup in messagegroups.items() -%}
{%- set pascalGroupName = messagegroup.id  | pascal -%}
namespace {{ project_name | pascal }}
{
    {%- set class_name = ( pascalGroupName | strip_namespace )+"EventProducer" %}
     public partial class {{ class_name }}
     {
        
         {%- if uses_cloudevents_message %}
         private readonly ContentMode contentMode;
         private readonly CloudEventFormatter formatter;
         public event EventHandler<CloudEvent>? BeforeSend;
         {%- endif %}
         private readonly AmqpProducer endpoint;

 
         private {{ class_name }}(AmqpProducer endpoint{%- if uses_cloudevents_message -%}, ContentMode contentMode, CloudEventFormatter formatter{%- endif -%})
         {
            {%- if uses_cloudevents_message %}
             this.contentMode = contentMode;
             this.formatter = formatter;
            {%- endif %}
             this.endpoint = endpoint;
         }
 
         {%- if root.endpoints -%} 
         {%- for endpoint_key in root.endpoints.keys() -%}
         {%- set endpoint = root.endpoints[endpoint_key] -%}
         {%- if endpoint.usage == "producer" -%}
           {%- set protocol = endpoint.config.protocol | lower -%}
           {%- set options = endpoint.config.options -%}
           {%- set endpoints = endpoint.config.endpoints %}
        public static {{ class_name }} CreateProducerFor{{ endpoint_key | pascal | strip_namespace }}(ILogger logger, EndpointCredential credential {% if uses_cloudevents_message %}, ContentMode contentMode, CloudEventFormatter formatter {% endif %}) 
        {       
            {%- if options %}
            var options = new Dictionary<string, string> {
            {%- for key, value in options.items()%}
                { "{{ key }}" , "{{ value }}" }
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            {%- endif %}
            var endpoints = new List<Uri> {
            {%- for epo in endpoints %}
                new Uri("{{ epo.uri }}")
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            return new {{ class_name }}(new AmqpProducer(logger, credential, {% if options %}options, {% else %}new Dictionary<string, string>(), {% endif %}endpoints){%- if uses_cloudevents_message %}, contentMode, formatter{%- endif %});
        }
        {%- endif -%}
        {%- endfor -%}
        {% endif %}

        public static {{ class_name }} CreateProducer(ILogger logger, EndpointCredential credential{% if uses_cloudevents_message %}, ContentMode contentMode, CloudEventFormatter formatter{% endif %}, Dictionary<string, string> options, List<Uri> endpoints)
        {
            return new {{ class_name }}(new AmqpProducer(logger, credential, options, endpoints){%- if uses_cloudevents_message %}, contentMode, formatter{%- endif %});
        }
        
        {% for id in messagegroup.messages -%}
        {%- set definition = messagegroup.messages[id] -%}
        {%- set pascalDefinitionName = definition.id | pascal %}
        {%- set isCloudEvent = not definition.format or definition.format.lower().startswith("cloudevents") -%}
        {%- set isAmqp = not isCloudEvent and definition.format.lower().startswith("amqp") %}
        public async Task Send{{ pascalDefinitionName | strip_namespace }}Async(
        {%- if definition.schemaurl or definition.schema -%}
        global::{{ (definition.schemaurl if definition.schemaurl else definition.schema) | schema_type( project_name, root, definition.schemaformat) | pascal }} data
        {%- else -%}
        object data
        {%- endif %}    
        {%- if isCloudEvent -%}
        {{- cloudEvents.DeclareUriTemplateArguments(definition) -}}
        {%- elif isAmqp -%}
        {{- amqp.DeclareUriTemplateArguments(definition) -}}
        {%- endif -%}
        , string contentType = System.Net.Mime.MediaTypeNames.Application.Json)
        {
            {% if isCloudEvent %}
            {{ cloudEvents.DeclareCloudNativeCloudEvent("cloudEvent", definition) | indent(12)}}
            cloudEvent.Data = {% if definition.schemaurl -%}
            {%- set schemaObj = schema_object(root, definition.schemaurl ) -%}
            {%- if schemaObj and "format" in schemaObj and not schemaObj.format.lower().startswith("json") -%}
            data.ToByteArray(contentType)
            {%- else -%}
            data
            {%- endif -%}
            {%- else -%}data{%- endif %};
            cloudEvent.DataContentType = contentType;
            if (BeforeSend != null)
            {
                BeforeSend(this, cloudEvent);
            }
            await endpoint.SendAsync(cloudEvent, contentMode, formatter);
            {% elif isAmqp %}
            {{- amqp.DeclareAmqpNetLiteMessage("amqpMessage", definition) | indent(12)}}
            amqpMessage.BodySection = new Data() { Binary = data.ToByteArray() };
            await ((AmqpProducer)endpoint).SendAsync(amqpMessage);
            {%- endif %}
        }
        {% endfor %}
    }
}
{% endfor -%}