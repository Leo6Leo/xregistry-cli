{%- import "cloudevents.jinja.include" as cloudEvents -%}
{%- import "amqp.jinja.include" as amqp -%}
{%- import "mqtt.jinja.include" as mqtt -%}
{%- set messagegroups = root.messagegroups %}
{%- set uses_cloudevents_message = (root | exists( "format", "cloudevents" )) %}
{%- set uses_amqp_message = (root | exists( "format", "amqp" )) %}
{%- set uses_amqp_endpoint = (root | exists( "protocol", "amqp" )) %}
{%- set uses_mqtt_message = (root | exists( "format", "mqtt" )) %}
{%- set uses_mqtt_endpoint = (root | exists( "protocol", "mqtt" )) %}
{%- set function_name = project_name | pascal -%}
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Text.RegularExpressions;
using CloudNative.CloudEvents.Experimental.Endpoints;

{%- if uses_cloudevents_message %}
using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
{%- endif %}
{%- if uses_amqp_message %}
{{ amqp.AmqpNetLiteHeaders() }}
{%- endif %}
{%- if uses_mqtt_message %}
{{ mqtt.MqttNetHeaders() }}
{%- endif %}
using Microsoft.Extensions.Logging;
 
{% for messagegroup_key, messagegroup in messagegroups.items() -%}
 {%- set pascalGroupName = messagegroup.id | default(messagegroup_key) | pascal -%}
namespace {{ project_name | pascal }}
{
     {%- set class_name = ( pascalGroupName | strip_namespace )+"EventConsumer" %}
    public class {{ class_name }} : IDisposable
    {
        {%- if uses_cloudevents_message %}
        {{ cloudEvents.DeclareDispatchObjectsFields( messagegroups ) | indent(8) }}
        {{ cloudEvents.DeclareDispatchObjectsConstructor( project_name, class_name, messagegroups, "ConsumerEndpoint endpoint", "this.endpoint = endpoint;\nthis.endpoint.DispatchCloudEventAsync += DispatchCloudEventAsync;") | indent(8) }}
        {%- endif %}
        {%- if uses_amqp_message %}
        {{ amqp.DeclareDispatchObjectsFields( messagegroups ) | indent(8) }}
        {{ amqp.DeclareDispatchObjectsConstructor( project_name, class_name, messagegroups, "ConsumerEndpoint endpoint", "this.endpoint = endpoint;\nthis.endpoint.DispatchMessageAsync += DispatchMessageAsync;") | indent(8) }}
        {%- endif %}
        {%- if uses_mqtt_message %}
        {{ mqtt.DeclareDispatchObjectsFields( messagegroups ) | indent(8) }}
        {{ mqtt.DeclareDispatchObjectsConstructor( project_name, class_name, messagegroups, "ConsumerEndpoint endpoint", "this.endpoint = endpoint;\nthis.endpoint.DispatchApplicationMessageAsync += DispatchApplicationMessageAsync;") | indent(8) }}
        {%- endif %}

        private ConsumerEndpoint endpoint;
        public ConsumerEndpoint Endpoint
        {
            get 
            {
                return this.endpoint;
            }
        }

        
        {%- if uses_cloudevents_message %}
        
        public async Task DispatchCloudEventAsync(
               CloudEvent cloudEvent,
               ILogger log)
        {
            try 
            {
                {{ cloudEvents.DispatchToDispatchObjects( "cloudEvent", messagegroups ) | indent(16) }}
            }
            catch (Exception ex)
            {
                log.LogError(ex, "Error dispatching message");
            }
        }
        {%- endif %}

        {%- if uses_amqp_message %}
        public async Task DispatchMessageAsync(
               Amqp.Message amqpMessage,
               ILogger log)
        {
            try 
            {
                {{ amqp.DispatchToDispatchObjects( "amqpMessage", messagegroups ) | indent(16) }}
            }
            catch (Exception ex)
            {
                log.LogError(ex, "Error dispatching message");
            }
        }
        {%- endif %}

        {%- if uses_mqtt_message %}
        public async Task DispatchApplicationMessageAsync(
               MqttApplicationMessage mqttMessage,
               ILogger log)
        {
            try 
            {
               {{ mqtt.DispatchToDispatchObjects( "mqttMessage", messagegroups ) | indent(16) }}
            }
            catch (Exception ex)
            {
                log.LogError(ex, "Error dispatching message");
            }
        }
        {%- endif %}

        public void Dispose()
        {
            this.endpoint.Dispose();
            this.endpoint = null;
        }

        {%- if root.endpoints -%} 
         {%- for endpoint_key in root.endpoints.keys() -%}
         {%- set endpoint = root.endpoints[endpoint_key] -%}
         {%- if endpoint.usage == "consumer" -%}
           {%- set protocol = endpoint.config.protocol | lower -%}
           {%- set options = endpoint.config.options -%}
           {%- set endpoints = endpoint.config.endpoints %}
           {%- set isCloudEvent = not endpoint.format or endpoint.format.lower().startswith("cloudevents") -%}
           {%- set isAmqp = not isCloudEvent and endpoint.format.lower().startswith("amqp") %}
           {%- set isMqtt = not isCloudEvent and endpoint.format.lower().startswith("mqtt") %}
                
        public static {{ class_name }} CreateFor{{ endpoint_key | pascal | strip_namespace }}(ILogger logger, IEndpointCredential credential, {{ cloudEvents.DeclareDispatchObjectsArgs( messagegroups, true ) }}{{ amqp.DeclareDispatchObjectsArgs( messagegroups, true ) }}{{ mqtt.DeclareDispatchObjectsArgs( messagegroups, true ) }}) 
        {       
            {%- if options %}
            var options = new Dictionary<string, string> {
            {%- for key, value in options.items()%}
                { "{{ key }}" , "{{ value }}" }
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            {%- endif %}
            var endpoints = new List<Uri> {
            {%- for uri in endpoints %}
                new Uri("{{ uri }}")
                {%- if not loop.last -%},{%- endif %}
            {%- endfor %}
            };
            var endpoint = ConsumerEndpoint.Create(logger, credential, {{ protocol | pascal }}Protocol.Name, {% if options %}options, {% else %}null, {% endif %}endpoints);
            var consumer = new {{ class_name }}(endpoint, {{ cloudEvents.DeclareDispatchObjectsArgs( messagegroups, false ) -}}{{ amqp.DeclareDispatchObjectsArgs( messagegroups, false ) -}}{{ mqtt.DeclareDispatchObjectsArgs( messagegroups, false ) -}});
            return consumer;
        }
        {%- endif -%}
        {%- endfor -%}
        {% endif %}
    }

}
{% endfor %}