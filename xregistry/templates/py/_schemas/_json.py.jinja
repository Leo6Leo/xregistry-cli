# pylint: disable=unused-import, line-too-long, missing-module-docstring, missing-function-docstring, missing-class-docstring
from typing import Any, Dict, List, Optional, Union
from datetime import datetime, date
import json
from copy import deepcopy

{% set schema_name = class_name | snake -%}
{%- set schema = root %}
{%- macro python_type(json_type, format=None, nested_name=None) -%}
    {%- if json_type == 'integer' -%}
        int
    {%- elif json_type == 'number' -%}
        float
    {%- elif json_type == 'string' -%}
        {%- if format == 'date-time' -%}
            datetime
        {%- elif format == 'date' -%}
            date
        {%- else -%}
            str
        {%- endif -%}
    {%- elif json_type == 'boolean' -%}
        bool
    {%- elif json_type == 'array' -%}
        {%- if nested_name -%}
            List[{{nested_name}}]
        {%- else -%}
            List
        {%- endif -%}
    {%- elif json_type == 'object' -%}
        {%- if nested_name -%}
            {{ nested_name }}
        {%- else -%}
            Dict
        {%- endif -%}
    {%- else -%}
        Any
    {%- endif -%}
{%- endmacro -%}

{%- macro emitclass(type, prefix_type_name, type_name, is_nested=False) -%}
{% if prefix_type_name %}
{%- set prefix_type_name = prefix_type_name + '.' %}
{%- endif %}
{%- if type.type == 'object' or not type.type %}
class {{ type_name | snake }}:
{%- if type.properties %}
{%- for pn, property in type.properties.items() %}
{%- if property.type == 'object' %}
{%- set nested_class_name = pn + '_type' | snake %}
{{- emitclass(property, prefix_type_name + type_name, nested_class_name, is_nested=True) }}
{%- elif property.type == 'array' %}
{%- set nested_class_name = pn + '_type' | snake %}
{{- emitclass(property['items'], prefix_type_name + type_name, nested_class_name, is_nested=True) | indent(4) }}
{%- endif %}
{%- endfor %}
{%- endif %}

    def __init__(self, data: Optional[Dict[str, Any]] = None) -> None:
        """{{ type.description | default(type_name | snake, true) }}"""
        {%- if type.properties %}
        {%- for pn, property in type.properties.items() %}
        {%- set propertyName = pn | snake %}
        {%- if property.type == 'object' %}
        {%- set nested_class_name = type_name + '.' + propertyName + '_type' | snake %}
        self.{{ propertyName }}: {{prefix_type_name}}{{ nested_class_name }} = {{prefix_type_name}}{{ nested_class_name }}(data.get('{{ pn }}', {})) if data else {{prefix_type_name}}{{ nested_class_name }}()
        {%- elif property.type == 'array' %}
        {%- set nested_class_name = type_name + '.' + propertyName + '_type' | snake %}
        self.{{ propertyName }}: List[{{prefix_type_name}}{{ nested_class_name }}] = [{{prefix_type_name}}{{ nested_class_name }}.from_data(item) for item in data.get('{{ pn }}', [])] if data else []
        {%- else %}
        {%- set propertyType = python_type(property.type, property.format, '') %}
        self.{{ propertyName }}: {{ propertyType }} = data.get('{{ pn }}', None) if data else None
        {%- endif %}
        {%- endfor %}
        {%- endif %}

    @classmethod
    def from_data(cls, data: Union[str, Dict[str, Any], '{{prefix_type_name}}{{ type_name | snake }}']) -> '{{prefix_type_name}}{{ type_name | snake }}':
        """Create an instance of {{prefix_type_name}}{{ type_name | snake }} from a dictionary or JSON string"""
        if isinstance(data, cls):
            return data
        elif isinstance(data, dict):
            return cls(data)
        elif isinstance(data, str):
            try:
                return cls(json.loads(data))
            except ValueError as e:
                raise ValueError(f"Error parsing string as JSON: {str(e)}") from e
        else:
            raise TypeError("Data is not of a supported type for conversion to {{prefix_type_name}}{{ type_name | snake }}")

    def to_dict(self) -> Dict[str, Any]:
        """Convert this object to a dictionary"""
        return {attr: getattr(self, attr).to_dict() if hasattr(getattr(self, attr), 'to_dict') else getattr(self, attr) for attr in self.__dict__ if not attr.startswith('_')}

    def clone(self) -> '{{prefix_type_name}}{{ type_name | snake }}':
        """Create a deep copy of this object"""
        return deepcopy(self)

{% if type.properties %}
{%- for pn, property in type.properties.items() %}
{%- if property.type != 'object' and property.type != 'array' %}
    @property
    def {{ pn | snake }}(self) -> {{ python_type(property.type, property.format, (pn | snake) if property.type == 'object' else None).strip("'") }}:
        return self._{{ pn | snake }}

    @{{ pn | snake }}.setter
    def {{ pn | snake }}(self, value: {{ python_type(property.type, property.format, (pn | snake) if property.type == 'object' else None).strip("'") }}) -> None:
        self._{{ pn | snake }} = value
{%- elif property.type == 'array' %}
    @property
    def {{ pn | snake }}(self) -> List[{{ prefix_type_name }}{{ pn + '_type' | snake }}]:
        return self._{{ pn | snake }}

    @{{ pn | snake }}.setter
    def {{ pn | snake }}(self, value: List[{{ prefix_type_name }}{{ pn + '_type' | snake }}]) -> None:
        self._{{ pn | snake }} = value
{%- else %}
    @property
    def {{ pn | snake }}(self) -> {{ prefix_type_name }}{{ pn + '_type' | snake }}:
        return self._{{ pn | snake }}

    @{{ pn | snake }}.setter
    def {{ pn | snake }}(self, value: {{ prefix_type_name }}{{ pn + '_type' | snake }}) -> None:
        self._{{ pn | snake }} = value
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
{%- endmacro -%}

{{ emitclass(schema, '', schema_name) }}
